//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2018 June 07 01:54:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace go
{
    public static unsafe partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.1.0")]
        [PromotedInterface(typeof(V))]
        public struct V<T> : V
        {
            private T m_target;

            private delegate void NByVal(T value);
            private delegate void NByRef(ref T value);

            private static readonly NByVal s_NByVal;
            private static readonly NByRef s_NByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void N() => s_NByRef?.Invoke(ref m_target) ?? s_NByVal(m_target);

            [DebuggerStepperBoundary]
            static V()
            {
                Type targetType = typeof(T);
                Delegate extensionMethod;
                bool isByRef;

                extensionMethod = targetType.GetExtensionDelegateSearchingPromotions<PromotedStructAttribute>("N", out isByRef);

                // This run-time exception is a compile time error in Go, so it's not an expected exception if Go code compiles
                if ((object)extensionMethod == null)
                    throw new NotImplementedException($"{targetType.Name} does not implement V.N function");

                if (isByRef)
                    s_NByRef = extensionMethod as NByRef;
                else
                    s_NByVal = extensionMethod as NByVal;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator V<T>(T target) => new V<T> { m_target = target };

            // Enable comparisons between nil and V<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(V<T> value, NilType nil) => (object)value == null || Activator.CreateInstance<V<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(V<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, V<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, V<T> value) => value != nil;
        }

        [GeneratedCode("go2cs", "0.1.1.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static V V_cast<T>(T target) => (V<T>)target;
    }
}

namespace go
{
    public partial class NilType
    {
        // Enable comparisons between nil and Abser interface
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(go.main_package.V value, NilType nil) => (object)value == null || Activator.CreateInstance(value.GetType()).Equals(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(go.main_package.V value, NilType nil) => !(value == nil);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(NilType nil, go.main_package.V value) => value == nil;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(NilType nil, go.main_package.V value) => value != nil;
    }
}