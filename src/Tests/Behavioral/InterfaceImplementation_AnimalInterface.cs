//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2018 June 07 01:54:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace go
{
    public static unsafe partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.1.0")]
        [PromotedInterface(typeof(Animal))]
        public struct Animal<T> : Animal
        {
            private T m_target;

            private delegate string TypeByVal(T value);
            private delegate string TypeByRef(ref T value);

            private static readonly TypeByVal s_TypeByVal;
            private static readonly TypeByRef s_TypeByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public string Type() => s_TypeByRef?.Invoke(ref m_target) ?? s_TypeByVal(m_target);
            private delegate string SwimByVal(T value);
            private delegate string SwimByRef(ref T value);

            private static readonly SwimByVal s_SwimByVal;
            private static readonly SwimByRef s_SwimByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public string Swim() => s_SwimByRef?.Invoke(ref m_target) ?? s_SwimByVal(m_target);

            [DebuggerStepperBoundary]
            static Animal()
            {
                Type targetType = typeof(T);
                Delegate extensionMethod;
                bool isByRef;

                extensionMethod = targetType.GetExtensionDelegateSearchingPromotions<PromotedStructAttribute>("Type", out isByRef);

                // This run-time exception is a compile time error in Go, so it's not an expected exception if Go code compiles
                if ((object)extensionMethod == null)
                    throw new NotImplementedException($"{targetType.Name} does not implement Animal.Type function");

                if (isByRef)
                    s_TypeByRef = extensionMethod as TypeByRef;
                else
                    s_TypeByVal = extensionMethod as TypeByVal;
                extensionMethod = targetType.GetExtensionDelegateSearchingPromotions<PromotedStructAttribute>("Swim", out isByRef);

                // This run-time exception is a compile time error in Go, so it's not an expected exception if Go code compiles
                if ((object)extensionMethod == null)
                    throw new NotImplementedException($"{targetType.Name} does not implement Animal.Swim function");

                if (isByRef)
                    s_SwimByRef = extensionMethod as SwimByRef;
                else
                    s_SwimByVal = extensionMethod as SwimByVal;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Animal<T>(T target) => new Animal<T> { m_target = target };

            // Enable comparisons between nil and Animal<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Animal<T> value, NilType nil) => (object)value == null || Activator.CreateInstance<Animal<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Animal<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Animal<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Animal<T> value) => value != nil;
        }

        [GeneratedCode("go2cs", "0.1.1.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static Animal Animal_cast<T>(T target) => (Animal<T>)target;
    }
}

namespace go
{
    public partial class NilType
    {
        // Enable comparisons between nil and Abser interface
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(go.main_package.Animal value, NilType nil) => (object)value == null || Activator.CreateInstance(value.GetType()).Equals(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(go.main_package.Animal value, NilType nil) => !(value == nil);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(NilType nil, go.main_package.Animal value) => value == nil;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(NilType nil, go.main_package.Animal value) => value != nil;
    }
}