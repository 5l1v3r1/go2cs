//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Golang.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GolangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, IDENTIFIER=62, KEYWORD=63, BINARY_OP=64, INT_LIT=65, 
		FLOAT_LIT=66, IMAGINARY_LIT=67, RUNE_LIT=68, LITTLE_U_VALUE=69, BIG_U_VALUE=70, 
		STRING_LIT=71, WS=72, COMMENT=73, TERMINATOR=74, LINE_COMMENT=75;
	public const int
		RULE_sourceFile = 0, RULE_packageClause = 1, RULE_importDecl = 2, RULE_importSpec = 3, 
		RULE_importPath = 4, RULE_topLevelDecl = 5, RULE_declaration = 6, RULE_constDecl = 7, 
		RULE_constSpec = 8, RULE_identifierList = 9, RULE_expressionList = 10, 
		RULE_typeDecl = 11, RULE_typeSpec = 12, RULE_functionDecl = 13, RULE_function = 14, 
		RULE_methodDecl = 15, RULE_receiver = 16, RULE_varDecl = 17, RULE_varSpec = 18, 
		RULE_block = 19, RULE_statementList = 20, RULE_statement = 21, RULE_simpleStmt = 22, 
		RULE_expressionStmt = 23, RULE_sendStmt = 24, RULE_incDecStmt = 25, RULE_assignment = 26, 
		RULE_assign_op = 27, RULE_shortVarDecl = 28, RULE_emptyStmt = 29, RULE_labeledStmt = 30, 
		RULE_returnStmt = 31, RULE_breakStmt = 32, RULE_continueStmt = 33, RULE_gotoStmt = 34, 
		RULE_fallthroughStmt = 35, RULE_deferStmt = 36, RULE_ifStmt = 37, RULE_switchStmt = 38, 
		RULE_exprSwitchStmt = 39, RULE_exprCaseClause = 40, RULE_exprSwitchCase = 41, 
		RULE_typeSwitchStmt = 42, RULE_typeSwitchGuard = 43, RULE_typeCaseClause = 44, 
		RULE_typeSwitchCase = 45, RULE_typeList = 46, RULE_selectStmt = 47, RULE_commClause = 48, 
		RULE_commCase = 49, RULE_recvStmt = 50, RULE_forStmt = 51, RULE_forClause = 52, 
		RULE_rangeClause = 53, RULE_goStmt = 54, RULE_type = 55, RULE_typeName = 56, 
		RULE_typeLit = 57, RULE_arrayType = 58, RULE_arrayLength = 59, RULE_elementType = 60, 
		RULE_pointerType = 61, RULE_interfaceType = 62, RULE_sliceType = 63, RULE_mapType = 64, 
		RULE_channelType = 65, RULE_methodSpec = 66, RULE_functionType = 67, RULE_signature = 68, 
		RULE_result = 69, RULE_parameters = 70, RULE_parameterList = 71, RULE_parameterDecl = 72, 
		RULE_operand = 73, RULE_literal = 74, RULE_basicLit = 75, RULE_operandName = 76, 
		RULE_qualifiedIdent = 77, RULE_compositeLit = 78, RULE_literalType = 79, 
		RULE_literalValue = 80, RULE_elementList = 81, RULE_keyedElement = 82, 
		RULE_key = 83, RULE_element = 84, RULE_structType = 85, RULE_fieldDecl = 86, 
		RULE_anonymousField = 87, RULE_functionLit = 88, RULE_primaryExpr = 89, 
		RULE_selector = 90, RULE_index = 91, RULE_slice = 92, RULE_typeAssertion = 93, 
		RULE_arguments = 94, RULE_methodExpr = 95, RULE_receiverType = 96, RULE_expression = 97, 
		RULE_unaryExpr = 98, RULE_conversion = 99, RULE_eos = 100;
	public static readonly string[] ruleNames = {
		"sourceFile", "packageClause", "importDecl", "importSpec", "importPath", 
		"topLevelDecl", "declaration", "constDecl", "constSpec", "identifierList", 
		"expressionList", "typeDecl", "typeSpec", "functionDecl", "function", 
		"methodDecl", "receiver", "varDecl", "varSpec", "block", "statementList", 
		"statement", "simpleStmt", "expressionStmt", "sendStmt", "incDecStmt", 
		"assignment", "assign_op", "shortVarDecl", "emptyStmt", "labeledStmt", 
		"returnStmt", "breakStmt", "continueStmt", "gotoStmt", "fallthroughStmt", 
		"deferStmt", "ifStmt", "switchStmt", "exprSwitchStmt", "exprCaseClause", 
		"exprSwitchCase", "typeSwitchStmt", "typeSwitchGuard", "typeCaseClause", 
		"typeSwitchCase", "typeList", "selectStmt", "commClause", "commCase", 
		"recvStmt", "forStmt", "forClause", "rangeClause", "goStmt", "type", "typeName", 
		"typeLit", "arrayType", "arrayLength", "elementType", "pointerType", "interfaceType", 
		"sliceType", "mapType", "channelType", "methodSpec", "functionType", "signature", 
		"result", "parameters", "parameterList", "parameterDecl", "operand", "literal", 
		"basicLit", "operandName", "qualifiedIdent", "compositeLit", "literalType", 
		"literalValue", "elementList", "keyedElement", "key", "element", "structType", 
		"fieldDecl", "anonymousField", "functionLit", "primaryExpr", "selector", 
		"index", "slice", "typeAssertion", "arguments", "methodExpr", "receiverType", 
		"expression", "unaryExpr", "conversion", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'package'", "'import'", "'('", "')'", "'.'", "'const'", "'='", 
		"','", "'type'", "';'", "'func'", "'var'", "'{'", "'}'", "'<-'", "'++'", 
		"'--'", "'+'", "'-'", "'|'", "'^'", "'*'", "'/'", "'%'", "'<<'", "'>>'", 
		"'&'", "'&^'", "':='", "':'", "'return'", "'break'", "'continue'", "'goto'", 
		"'fallthrough'", "'defer'", "'if'", "'else'", "'switch'", "'case'", "'default'", 
		"'select'", "'for'", "'range'", "'go'", "'['", "']'", "'interface'", "'map'", 
		"'chan'", "'...'", "'struct'", "'||'", "'&&'", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "IDENTIFIER", "KEYWORD", "BINARY_OP", "INT_LIT", "FLOAT_LIT", 
		"IMAGINARY_LIT", "RUNE_LIT", "LITTLE_U_VALUE", "BIG_U_VALUE", "STRING_LIT", 
		"WS", "COMMENT", "TERMINATOR", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Golang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GolangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    /// <summary>
	    /// Determines if on the current index of the parser's token stream a token exists on the
	    /// <c>HiddenChannel</c> which either is a line terminator, or is a multi line comment that
	    /// contains a line terminator. Also checks for <c>LineCommentChannel</c> which will always
		/// indicate that a line terminator exists.
		/// </summary>
	    /// <returns>
	    /// <c>true</c> if on the current index of the parser's token stream a token exists on the
	    /// <c>HiddenChannel</c> which either is a line terminator, or is a multi line comment that
	    /// contains a line terminator; otherwise, <c>false</c>.
	    /// </returns>
	    private bool LineTerminatorAhead()
	    {
	        // Get the token ahead of the current index.
	        int possibleIndexEosToken = CurrentToken.TokenIndex - 1;

	        IToken ahead = TokenStream.Get(possibleIndexEosToken);

	        if (ahead.Channel != TokenConstants.HiddenChannel && ahead.Channel != GolangLexer.LineCommentChannel)
	        {
	            // We're only interested in tokens on the HIDDEN channels.
	            return false;
	        }

	        if (ahead.Type == TERMINATOR || ahead.Type == LINE_COMMENT)
	        {
	            // There is definitely a line terminator ahead.
	            return true;
	        }

	        if (ahead.Type == WS)
	        {
	            // Get the token ahead of the current whitespace.
	            possibleIndexEosToken = CurrentToken.TokenIndex - 2;
	            ahead = TokenStream.Get(possibleIndexEosToken);
	        }

	        // Get the token's text and type.
	        String text = ahead.Text;
	        int type = ahead.Type;

	        // Check if the token is, or contains a line terminator
	        return type == LINE_COMMENT || (type == COMMENT && text.IndexOfAny(new[] { '\r', '\n' }) >= 0) || type == TERMINATOR;
	    }

		public GolangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GolangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SourceFileContext : ParserRuleContext {
		public PackageClauseContext packageClause() {
			return GetRuleContext<PackageClauseContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ImportDeclContext[] importDecl() {
			return GetRuleContexts<ImportDeclContext>();
		}
		public ImportDeclContext importDecl(int i) {
			return GetRuleContext<ImportDeclContext>(i);
		}
		public TopLevelDeclContext[] topLevelDecl() {
			return GetRuleContexts<TopLevelDeclContext>();
		}
		public TopLevelDeclContext topLevelDecl(int i) {
			return GetRuleContext<TopLevelDeclContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; packageClause();
			State = 203; eos();
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 204; importDecl();
				State = 205; eos();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__8) | (1L << T__10) | (1L << T__11))) != 0)) {
				{
				{
				State = 212; topLevelDecl();
				State = 213; eos();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageClauseContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public PackageClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterPackageClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitPackageClause(this);
		}
	}

	[RuleVersion(0)]
	public PackageClauseContext packageClause() {
		PackageClauseContext _localctx = new PackageClauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(T__0);
			State = 221; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclContext : ParserRuleContext {
		public ImportSpecContext[] importSpec() {
			return GetRuleContexts<ImportSpecContext>();
		}
		public ImportSpecContext importSpec(int i) {
			return GetRuleContext<ImportSpecContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ImportDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterImportDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitImportDecl(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclContext importDecl() {
		ImportDeclContext _localctx = new ImportDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(T__1);
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case IDENTIFIER:
			case STRING_LIT:
				{
				State = 224; importSpec();
				}
				break;
			case T__2:
				{
				State = 225; Match(T__2);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4 || _la==IDENTIFIER || _la==STRING_LIT) {
					{
					{
					State = 226; importSpec();
					State = 227; eos();
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 234; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSpecContext : ParserRuleContext {
		public ImportPathContext importPath() {
			return GetRuleContext<ImportPathContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public ImportSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterImportSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitImportSpec(this);
		}
	}

	[RuleVersion(0)]
	public ImportSpecContext importSpec() {
		ImportSpecContext _localctx = new ImportSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_importSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==IDENTIFIER) {
				{
				State = 237;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 240; importPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportPathContext : ParserRuleContext {
		public ITerminalNode STRING_LIT() { return GetToken(GolangParser.STRING_LIT, 0); }
		public ImportPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importPath; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterImportPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitImportPath(this);
		}
	}

	[RuleVersion(0)]
	public ImportPathContext importPath() {
		ImportPathContext _localctx = new ImportPathContext(Context, State);
		EnterRule(_localctx, 8, RULE_importPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(STRING_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public MethodDeclContext methodDecl() {
			return GetRuleContext<MethodDeclContext>(0);
		}
		public TopLevelDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTopLevelDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTopLevelDecl(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclContext topLevelDecl() {
		TopLevelDeclContext _localctx = new TopLevelDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_topLevelDecl);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; functionDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 246; methodDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; constDecl();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; typeDecl();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251; varDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		public ConstSpecContext[] constSpec() {
			return GetRuleContexts<ConstSpecContext>();
		}
		public ConstSpecContext constSpec(int i) {
			return GetRuleContext<ConstSpecContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_constDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(T__5);
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 255; constSpec();
				}
				break;
			case T__2:
				{
				State = 256; Match(T__2);
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 257; constSpec();
					State = 258; eos();
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 265; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSpecContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterConstSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitConstSpec(this);
		}
	}

	[RuleVersion(0)]
	public ConstSpecContext constSpec() {
		ConstSpecContext _localctx = new ConstSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_constSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; identifierList();
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__21) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 269; type();
					}
				}

				State = 272; Match(T__6);
				State = 273; expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(GolangParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GolangParser.IDENTIFIER, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 18, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(IDENTIFIER);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 277; Match(T__7);
					State = 278; Match(IDENTIFIER);
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; expression(0);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 285; Match(T__7);
					State = 286; expression(0);
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		public TypeSpecContext[] typeSpec() {
			return GetRuleContexts<TypeSpecContext>();
		}
		public TypeSpecContext typeSpec(int i) {
			return GetRuleContext<TypeSpecContext>(i);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(T__8);
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 293; typeSpec();
				}
				break;
			case T__2:
				{
				State = 294; Match(T__2);
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 295; typeSpec();
					State = 296; Match(T__9);
					}
					}
					State = 302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 303; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeSpec(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecContext typeSpec() {
		TypeSpecContext _localctx = new TypeSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(IDENTIFIER);
			State = 307; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(T__10);
			State = 310; Match(IDENTIFIER);
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 311; function();
				}
				break;
			case 2:
				{
				State = 312; signature();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; signature();
			State = 316; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public ReceiverContext receiver() {
			return GetRuleContext<ReceiverContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_methodDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(T__10);
			State = 319; receiver();
			State = 320; Match(IDENTIFIER);
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 321; function();
				}
				break;
			case 2:
				{
				State = 322; signature();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverContext : ParserRuleContext {
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ReceiverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiver; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterReceiver(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitReceiver(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverContext receiver() {
		ReceiverContext _localctx = new ReceiverContext(Context, State);
		EnterRule(_localctx, 32, RULE_receiver);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarSpecContext[] varSpec() {
			return GetRuleContexts<VarSpecContext>();
		}
		public VarSpecContext varSpec(int i) {
			return GetRuleContext<VarSpecContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 34, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(T__11);
			State = 339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 328; varSpec();
				}
				break;
			case T__2:
				{
				State = 329; Match(T__2);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 330; varSpec();
					State = 331; eos();
					}
					}
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 338; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public VarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterVarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitVarSpec(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecContext varSpec() {
		VarSpecContext _localctx = new VarSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_varSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; identifierList();
			State = 349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__10:
			case T__14:
			case T__21:
			case T__45:
			case T__47:
			case T__48:
			case T__49:
			case T__51:
			case IDENTIFIER:
				{
				State = 342; type();
				State = 345;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 343; Match(T__6);
					State = 344; expressionList();
					}
					break;
				}
				}
				break;
			case T__6:
				{
				State = 347; Match(T__6);
				State = 348; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(T__12);
			State = 352; statementList();
			State = 353; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 40, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__38) | (1L << T__41) | (1L << T__42) | (1L << T__44) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
				{
				{
				State = 355; statement();
				State = 356; eos();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LabeledStmtContext labeledStmt() {
			return GetRuleContext<LabeledStmtContext>(0);
		}
		public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		public GoStmtContext goStmt() {
			return GetRuleContext<GoStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		public GotoStmtContext gotoStmt() {
			return GetRuleContext<GotoStmtContext>(0);
		}
		public FallthroughStmtContext fallthroughStmt() {
			return GetRuleContext<FallthroughStmtContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		public SelectStmtContext selectStmt() {
			return GetRuleContext<SelectStmtContext>(0);
		}
		public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public DeferStmtContext deferStmt() {
			return GetRuleContext<DeferStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_statement);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364; labeledStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365; simpleStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366; goStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 367; returnStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 368; breakStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 369; continueStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 370; gotoStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 371; fallthroughStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 372; block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 373; ifStmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 374; switchStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 375; selectStmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 376; forStmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 377; deferStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStmtContext : ParserRuleContext {
		public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		public ExpressionStmtContext expressionStmt() {
			return GetRuleContext<ExpressionStmtContext>(0);
		}
		public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ShortVarDeclContext shortVarDecl() {
			return GetRuleContext<ShortVarDeclContext>(0);
		}
		public EmptyStmtContext emptyStmt() {
			return GetRuleContext<EmptyStmtContext>(0);
		}
		public SimpleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSimpleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSimpleStmt(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStmtContext simpleStmt() {
		SimpleStmtContext _localctx = new SimpleStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_simpleStmt);
		try {
			State = 386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380; sendStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; expressionStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 382; incDecStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 383; assignment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 384; shortVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 385; emptyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStmtContext expressionStmt() {
		ExpressionStmtContext _localctx = new ExpressionStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_expressionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendStmtContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSendStmt(this);
		}
	}

	[RuleVersion(0)]
	public SendStmtContext sendStmt() {
		SendStmtContext _localctx = new SendStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_sendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; expression(0);
			State = 391; Match(T__14);
			State = 392; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IncDecStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterIncDecStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitIncDecStmt(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStmtContext incDecStmt() {
		IncDecStmtContext _localctx = new IncDecStmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_incDecStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; expression(0);
			State = 395;
			_la = TokenStream.LA(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public Assign_opContext assign_op() {
			return GetRuleContext<Assign_opContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 52, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; expressionList();
			State = 398; assign_op();
			State = 399; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_opContext : ParserRuleContext {
		public Assign_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterAssign_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitAssign_op(this);
		}
	}

	[RuleVersion(0)]
	public Assign_opContext assign_op() {
		Assign_opContext _localctx = new Assign_opContext(Context, State);
		EnterRule(_localctx, 54, RULE_assign_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) {
				{
				State = 401;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 404; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortVarDeclContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ShortVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortVarDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterShortVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitShortVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public ShortVarDeclContext shortVarDecl() {
		ShortVarDeclContext _localctx = new ShortVarDeclContext(Context, State);
		EnterRule(_localctx, 56, RULE_shortVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; identifierList();
			State = 407; Match(T__28);
			State = 408; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStmtContext : ParserRuleContext {
		public EmptyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterEmptyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitEmptyStmt(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStmtContext emptyStmt() {
		EmptyStmtContext _localctx = new EmptyStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_emptyStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterLabeledStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitLabeledStmt(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStmtContext labeledStmt() {
		LabeledStmtContext _localctx = new LabeledStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_labeledStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(IDENTIFIER);
			State = 413; Match(T__29);
			State = 414; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T__30);
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 417; expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_breakStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(T__31);
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 421; Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_continueStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(T__32);
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 425; Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public GotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterGotoStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitGotoStmt(this);
		}
	}

	[RuleVersion(0)]
	public GotoStmtContext gotoStmt() {
		GotoStmtContext _localctx = new GotoStmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_gotoStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(T__33);
			State = 429; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FallthroughStmtContext : ParserRuleContext {
		public FallthroughStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fallthroughStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterFallthroughStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitFallthroughStmt(this);
		}
	}

	[RuleVersion(0)]
	public FallthroughStmtContext fallthroughStmt() {
		FallthroughStmtContext _localctx = new FallthroughStmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_fallthroughStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeferStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeferStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterDeferStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitDeferStmt(this);
		}
	}

	[RuleVersion(0)]
	public DeferStmtContext deferStmt() {
		DeferStmtContext _localctx = new DeferStmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_deferStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(T__35);
			State = 434; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(T__36);
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 437; simpleStmt();
				State = 438; Match(T__9);
				}
				break;
			}
			State = 442; expression(0);
			State = 443; block();
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 444; Match(T__37);
				State = 447;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__36:
					{
					State = 445; ifStmt();
					}
					break;
				case T__12:
					{
					State = 446; block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		public ExprSwitchStmtContext exprSwitchStmt() {
			return GetRuleContext<ExprSwitchStmtContext>(0);
		}
		public TypeSwitchStmtContext typeSwitchStmt() {
			return GetRuleContext<TypeSwitchStmtContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchStmt);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451; exprSwitchStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452; typeSwitchStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchStmtContext : ParserRuleContext {
		public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprCaseClauseContext[] exprCaseClause() {
			return GetRuleContexts<ExprCaseClauseContext>();
		}
		public ExprCaseClauseContext exprCaseClause(int i) {
			return GetRuleContext<ExprCaseClauseContext>(i);
		}
		public ExprSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterExprSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitExprSwitchStmt(this);
		}
	}

	[RuleVersion(0)]
	public ExprSwitchStmtContext exprSwitchStmt() {
		ExprSwitchStmtContext _localctx = new ExprSwitchStmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_exprSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; Match(T__38);
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 456; simpleStmt();
				State = 457; Match(T__9);
				}
				break;
			}
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
				{
				State = 461; expression(0);
				}
			}

			State = 464; Match(T__12);
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__39 || _la==T__40) {
				{
				{
				State = 465; exprCaseClause();
				}
				}
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 471; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprCaseClauseContext : ParserRuleContext {
		public ExprSwitchCaseContext exprSwitchCase() {
			return GetRuleContext<ExprSwitchCaseContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ExprCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprCaseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterExprCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitExprCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public ExprCaseClauseContext exprCaseClause() {
		ExprCaseClauseContext _localctx = new ExprCaseClauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_exprCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; exprSwitchCase();
			State = 474; Match(T__29);
			State = 475; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchCaseContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ExprSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterExprSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitExprSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public ExprSwitchCaseContext exprSwitchCase() {
		ExprSwitchCaseContext _localctx = new ExprSwitchCaseContext(Context, State);
		EnterRule(_localctx, 82, RULE_exprSwitchCase);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; Match(T__39);
				State = 478; expressionList();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479; Match(T__40);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchStmtContext : ParserRuleContext {
		public TypeSwitchGuardContext typeSwitchGuard() {
			return GetRuleContext<TypeSwitchGuardContext>(0);
		}
		public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		public TypeCaseClauseContext[] typeCaseClause() {
			return GetRuleContexts<TypeCaseClauseContext>();
		}
		public TypeCaseClauseContext typeCaseClause(int i) {
			return GetRuleContext<TypeCaseClauseContext>(i);
		}
		public TypeSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeSwitchStmt(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchStmtContext typeSwitchStmt() {
		TypeSwitchStmtContext _localctx = new TypeSwitchStmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(T__38);
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 483; simpleStmt();
				State = 484; Match(T__9);
				}
				break;
			}
			State = 488; typeSwitchGuard();
			State = 489; Match(T__12);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__39 || _la==T__40) {
				{
				{
				State = 490; typeCaseClause();
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 496; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchGuardContext : ParserRuleContext {
		public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public TypeSwitchGuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchGuard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeSwitchGuard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeSwitchGuard(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchGuardContext typeSwitchGuard() {
		TypeSwitchGuardContext _localctx = new TypeSwitchGuardContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeSwitchGuard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 498; Match(IDENTIFIER);
				State = 499; Match(T__28);
				}
				break;
			}
			State = 502; primaryExpr(0);
			State = 503; Match(T__4);
			State = 504; Match(T__2);
			State = 505; Match(T__8);
			State = 506; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCaseClauseContext : ParserRuleContext {
		public TypeSwitchCaseContext typeSwitchCase() {
			return GetRuleContext<TypeSwitchCaseContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public TypeCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCaseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public TypeCaseClauseContext typeCaseClause() {
		TypeCaseClauseContext _localctx = new TypeCaseClauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; typeSwitchCase();
			State = 509; Match(T__29);
			State = 510; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchCaseContext : ParserRuleContext {
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public TypeSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchCaseContext typeSwitchCase() {
		TypeSwitchCaseContext _localctx = new TypeSwitchCaseContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeSwitchCase);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512; Match(T__39);
				State = 513; typeList();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 514; Match(T__40);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; type();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 518; Match(T__7);
				State = 519; type();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStmtContext : ParserRuleContext {
		public CommClauseContext[] commClause() {
			return GetRuleContexts<CommClauseContext>();
		}
		public CommClauseContext commClause(int i) {
			return GetRuleContext<CommClauseContext>(i);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSelectStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSelectStmt(this);
		}
	}

	[RuleVersion(0)]
	public SelectStmtContext selectStmt() {
		SelectStmtContext _localctx = new SelectStmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_selectStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(T__41);
			State = 526; Match(T__12);
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__39 || _la==T__40) {
				{
				{
				State = 527; commClause();
				}
				}
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 533; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommClauseContext : ParserRuleContext {
		public CommCaseContext commCase() {
			return GetRuleContext<CommCaseContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CommClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterCommClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitCommClause(this);
		}
	}

	[RuleVersion(0)]
	public CommClauseContext commClause() {
		CommClauseContext _localctx = new CommClauseContext(Context, State);
		EnterRule(_localctx, 96, RULE_commClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; commCase();
			State = 536; Match(T__29);
			State = 537; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommCaseContext : ParserRuleContext {
		public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		public RecvStmtContext recvStmt() {
			return GetRuleContext<RecvStmtContext>(0);
		}
		public CommCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterCommCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitCommCase(this);
		}
	}

	[RuleVersion(0)]
	public CommCaseContext commCase() {
		CommCaseContext _localctx = new CommCaseContext(Context, State);
		EnterRule(_localctx, 98, RULE_commCase);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539; Match(T__39);
				State = 542;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 540; sendStmt();
					}
					break;
				case 2:
					{
					State = 541; recvStmt();
					}
					break;
				}
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; Match(T__40);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecvStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public RecvStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recvStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterRecvStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitRecvStmt(this);
		}
	}

	[RuleVersion(0)]
	public RecvStmtContext recvStmt() {
		RecvStmtContext _localctx = new RecvStmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_recvStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 547; expressionList();
				State = 548; Match(T__6);
				}
				break;
			case 2:
				{
				State = 550; identifierList();
				State = 551; Match(T__28);
				}
				break;
			}
			State = 555; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForClauseContext forClause() {
			return GetRuleContext<ForClauseContext>(0);
		}
		public RangeClauseContext rangeClause() {
			return GetRuleContext<RangeClauseContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_forStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(T__42);
			State = 561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 558; expression(0);
				}
				break;
			case 2:
				{
				State = 559; forClause();
				}
				break;
			case 3:
				{
				State = 560; rangeClause();
				}
				break;
			}
			State = 563; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForClauseContext : ParserRuleContext {
		public SimpleStmtContext[] simpleStmt() {
			return GetRuleContexts<SimpleStmtContext>();
		}
		public SimpleStmtContext simpleStmt(int i) {
			return GetRuleContext<SimpleStmtContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterForClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitForClause(this);
		}
	}

	[RuleVersion(0)]
	public ForClauseContext forClause() {
		ForClauseContext _localctx = new ForClauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_forClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 565; simpleStmt();
				}
				break;
			}
			State = 568; Match(T__9);
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
				{
				State = 569; expression(0);
				}
			}

			State = 572; Match(T__9);
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__9) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
				{
				State = 573; simpleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(Context, State);
		EnterRule(_localctx, 106, RULE_rangeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 576; expressionList();
				State = 577; Match(T__6);
				}
				break;
			case 2:
				{
				State = 579; identifierList();
				State = 580; Match(T__28);
				}
				break;
			}
			State = 584; Match(T__43);
			State = 585; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterGoStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitGoStmt(this);
		}
	}

	[RuleVersion(0)]
	public GoStmtContext goStmt() {
		GoStmtContext _localctx = new GoStmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_goStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; Match(T__44);
			State = 588; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeLitContext typeLit() {
			return GetRuleContext<TypeLitContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_type);
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; typeName();
				}
				break;
			case T__10:
			case T__14:
			case T__21:
			case T__45:
			case T__47:
			case T__48:
			case T__49:
			case T__51:
				EnterOuterAlt(_localctx, 2);
				{
				State = 591; typeLit();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 592; Match(T__2);
				State = 593; type();
				State = 594; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeName);
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 599; qualifiedIdent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLitContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		public ChannelTypeContext channelType() {
			return GetRuleContext<ChannelTypeContext>(0);
		}
		public TypeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeLit(this);
		}
	}

	[RuleVersion(0)]
	public TypeLitContext typeLit() {
		TypeLitContext _localctx = new TypeLitContext(Context, State);
		EnterRule(_localctx, 114, RULE_typeLit);
		try {
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603; structType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 604; pointerType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 605; functionType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 606; interfaceType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 607; sliceType();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 608; mapType();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 609; channelType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ArrayLengthContext arrayLength() {
			return GetRuleContext<ArrayLengthContext>(0);
		}
		public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; Match(T__45);
			State = 613; arrayLength();
			State = 614; Match(T__46);
			State = 615; elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLengthContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterArrayLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitArrayLength(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLengthContext arrayLength() {
		ArrayLengthContext _localctx = new ArrayLengthContext(Context, State);
		EnterRule(_localctx, 118, RULE_arrayLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ElementTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterElementType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitElementType(this);
		}
	}

	[RuleVersion(0)]
	public ElementTypeContext elementType() {
		ElementTypeContext _localctx = new ElementTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_elementType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621; Match(T__21);
			State = 622; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		public MethodSpecContext[] methodSpec() {
			return GetRuleContexts<MethodSpecContext>();
		}
		public MethodSpecContext methodSpec(int i) {
			return GetRuleContext<MethodSpecContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_interfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; Match(T__47);
			State = 625; Match(T__12);
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 626; methodSpec();
				State = 627; eos();
				}
				}
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 634; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceTypeContext : ParserRuleContext {
		public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public SliceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSliceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSliceType(this);
		}
	}

	[RuleVersion(0)]
	public SliceTypeContext sliceType() {
		SliceTypeContext _localctx = new SliceTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_sliceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; Match(T__45);
			State = 637; Match(T__46);
			State = 638; elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterMapType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitMapType(this);
		}
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(T__48);
			State = 641; Match(T__45);
			State = 642; type();
			State = 643; Match(T__46);
			State = 644; elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelTypeContext : ParserRuleContext {
		public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public ChannelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterChannelType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitChannelType(this);
		}
	}

	[RuleVersion(0)]
	public ChannelTypeContext channelType() {
		ChannelTypeContext _localctx = new ChannelTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_channelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 646; Match(T__49);
				}
				break;
			case 2:
				{
				State = 647; Match(T__49);
				State = 648; Match(T__14);
				}
				break;
			case 3:
				{
				State = 649; Match(T__14);
				State = 650; Match(T__49);
				}
				break;
			}
			State = 653; elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSpecContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MethodSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterMethodSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitMethodSpec(this);
		}
	}

	[RuleVersion(0)]
	public MethodSpecContext methodSpec() {
		MethodSpecContext _localctx = new MethodSpecContext(Context, State);
		EnterRule(_localctx, 132, RULE_methodSpec);
		try {
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655; Match(IDENTIFIER);
				State = 656; signature();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657; typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 134, RULE_functionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(T__10);
			State = 661; signature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 136, RULE_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663; parameters();
			State = 665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 664; result();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 138, RULE_result);
		try {
			State = 669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 667; parameters();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 140, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; Match(T__2);
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__21) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 672; parameterList();
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 673; Match(T__7);
					}
				}

				}
			}

			State = 678; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 142, RULE_parameterList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; parameterDecl();
			State = 685;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 681; Match(T__7);
					State = 682; parameterDecl();
					}
					} 
				}
				State = 687;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 144, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 688; identifierList();
				}
				break;
			}
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__50) {
				{
				State = 691; Match(T__50);
				}
			}

			State = 694; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public OperandNameContext operandName() {
			return GetRuleContext<OperandNameContext>(0);
		}
		public MethodExprContext methodExpr() {
			return GetRuleContext<MethodExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 146, RULE_operand);
		try {
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 696; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697; operandName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 698; methodExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 699; Match(T__2);
				State = 700; expression(0);
				State = 701; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public BasicLitContext basicLit() {
			return GetRuleContext<BasicLitContext>(0);
		}
		public CompositeLitContext compositeLit() {
			return GetRuleContext<CompositeLitContext>(0);
		}
		public FunctionLitContext functionLit() {
			return GetRuleContext<FunctionLitContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_literal);
		try {
			State = 708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705; basicLit();
				}
				break;
			case T__45:
			case T__48:
			case T__51:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706; compositeLit();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707; functionLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicLitContext : ParserRuleContext {
		public ITerminalNode INT_LIT() { return GetToken(GolangParser.INT_LIT, 0); }
		public ITerminalNode FLOAT_LIT() { return GetToken(GolangParser.FLOAT_LIT, 0); }
		public ITerminalNode IMAGINARY_LIT() { return GetToken(GolangParser.IMAGINARY_LIT, 0); }
		public ITerminalNode RUNE_LIT() { return GetToken(GolangParser.RUNE_LIT, 0); }
		public ITerminalNode STRING_LIT() { return GetToken(GolangParser.STRING_LIT, 0); }
		public BasicLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicLit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterBasicLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitBasicLit(this);
		}
	}

	[RuleVersion(0)]
	public BasicLitContext basicLit() {
		BasicLitContext _localctx = new BasicLitContext(Context, State);
		EnterRule(_localctx, 150, RULE_basicLit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterOperandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitOperandName(this);
		}
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 152, RULE_operandName);
		try {
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 713; qualifiedIdent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(GolangParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GolangParser.IDENTIFIER, i);
		}
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 154, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; Match(IDENTIFIER);
			State = 717; Match(T__4);
			State = 718; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeLitContext : ParserRuleContext {
		public LiteralTypeContext literalType() {
			return GetRuleContext<LiteralTypeContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public CompositeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeLit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterCompositeLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitCompositeLit(this);
		}
	}

	[RuleVersion(0)]
	public CompositeLitContext compositeLit() {
		CompositeLitContext _localctx = new CompositeLitContext(Context, State);
		EnterRule(_localctx, 156, RULE_compositeLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; literalType();
			State = 721; literalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTypeContext : ParserRuleContext {
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LiteralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterLiteralType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitLiteralType(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTypeContext literalType() {
		LiteralTypeContext _localctx = new LiteralTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_literalType);
		try {
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723; structType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 724; arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725; Match(T__45);
				State = 726; Match(T__50);
				State = 727; Match(T__46);
				State = 728; elementType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 729; sliceType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 730; mapType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 731; typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 160, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(T__12);
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__12) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
				{
				State = 735; elementList();
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 736; Match(T__7);
					}
				}

				}
			}

			State = 741; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public KeyedElementContext[] keyedElement() {
			return GetRuleContexts<KeyedElementContext>();
		}
		public KeyedElementContext keyedElement(int i) {
			return GetRuleContext<KeyedElementContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 162, RULE_elementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; keyedElement();
			State = 748;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 744; Match(T__7);
					State = 745; keyedElement();
					}
					} 
				}
				State = 750;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyedElementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public KeyedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyedElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterKeyedElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitKeyedElement(this);
		}
	}

	[RuleVersion(0)]
	public KeyedElementContext keyedElement() {
		KeyedElementContext _localctx = new KeyedElementContext(Context, State);
		EnterRule(_localctx, 164, RULE_keyedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 751; key();
				State = 752; Match(T__29);
				}
				break;
			}
			State = 756; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 166, RULE_key);
		try {
			State = 761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 758; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 759; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 760; literalValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 168, RULE_element);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__10:
			case T__14:
			case T__17:
			case T__18:
			case T__20:
			case T__21:
			case T__26:
			case T__45:
			case T__47:
			case T__48:
			case T__49:
			case T__51:
			case T__60:
			case IDENTIFIER:
			case INT_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763; expression(0);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764; literalValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		public FieldDeclContext[] fieldDecl() {
			return GetRuleContexts<FieldDeclContext>();
		}
		public FieldDeclContext fieldDecl(int i) {
			return GetRuleContext<FieldDeclContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterStructType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitStructType(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_structType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(T__51);
			State = 768; Match(T__12);
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21 || _la==IDENTIFIER) {
				{
				{
				State = 769; fieldDecl();
				State = 770; eos();
				}
				}
				State = 776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 777; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AnonymousFieldContext anonymousField() {
			return GetRuleContext<AnonymousFieldContext>(0);
		}
		public ITerminalNode STRING_LIT() { return GetToken(GolangParser.STRING_LIT, 0); }
		public FieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterFieldDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitFieldDecl(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclContext fieldDecl() {
		FieldDeclContext _localctx = new FieldDeclContext(Context, State);
		EnterRule(_localctx, 172, RULE_fieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 779; identifierList();
				State = 780; type();
				}
				break;
			case 2:
				{
				State = 782; anonymousField();
				}
				break;
			}
			State = 786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 785; Match(STRING_LIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFieldContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public AnonymousFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterAnonymousField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitAnonymousField(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFieldContext anonymousField() {
		AnonymousFieldContext _localctx = new AnonymousFieldContext(Context, State);
		EnterRule(_localctx, 174, RULE_anonymousField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 788; Match(T__21);
				}
			}

			State = 791; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionLitContext : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionLit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterFunctionLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitFunctionLit(this);
		}
	}

	[RuleVersion(0)]
	public FunctionLitContext functionLit() {
		FunctionLitContext _localctx = new FunctionLitContext(Context, State);
		EnterRule(_localctx, 176, RULE_functionLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; Match(T__10);
			State = 794; function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public SliceContext slice() {
			return GetRuleContext<SliceContext>(0);
		}
		public TypeAssertionContext typeAssertion() {
			return GetRuleContext<TypeAssertionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		return primaryExpr(0);
	}

	private PrimaryExprContext primaryExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, _parentState);
		PrimaryExprContext _prevctx = _localctx;
		int _startState = 178;
		EnterRecursionRule(_localctx, 178, RULE_primaryExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 797; operand();
				}
				break;
			case 2:
				{
				State = 798; conversion();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 813;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 811;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
					case 1:
						{
						_localctx = new PrimaryExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
						State = 801;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 802; selector();
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
						State = 803;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 804; index();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
						State = 805;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 806; slice();
						}
						break;
					case 4:
						{
						_localctx = new PrimaryExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
						State = 807;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 808; typeAssertion();
						}
						break;
					case 5:
						{
						_localctx = new PrimaryExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
						State = 809;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 810; arguments();
						}
						break;
					}
					} 
				}
				State = 815;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 180, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; Match(T__4);
			State = 817; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 182, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; Match(T__45);
			State = 820; expression(0);
			State = 821; Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterSlice(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitSlice(this);
		}
	}

	[RuleVersion(0)]
	public SliceContext slice() {
		SliceContext _localctx = new SliceContext(Context, State);
		EnterRule(_localctx, 184, RULE_slice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(T__45);
			State = 839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				{
				State = 825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
					{
					State = 824; expression(0);
					}
				}

				State = 827; Match(T__29);
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
					{
					State = 828; expression(0);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
					{
					State = 831; expression(0);
					}
				}

				State = 834; Match(T__29);
				State = 835; expression(0);
				State = 836; Match(T__29);
				State = 837; expression(0);
				}
				}
				break;
			}
			State = 841; Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAssertionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeAssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAssertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterTypeAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitTypeAssertion(this);
		}
	}

	[RuleVersion(0)]
	public TypeAssertionContext typeAssertion() {
		TypeAssertionContext _localctx = new TypeAssertionContext(Context, State);
		EnterRule(_localctx, 186, RULE_typeAssertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843; Match(T__4);
			State = 844; Match(T__2);
			State = 845; type();
			State = 846; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 188, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848; Match(T__2);
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__45) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__51) | (1L << T__60) | (1L << IDENTIFIER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INT_LIT - 65)) | (1L << (FLOAT_LIT - 65)) | (1L << (IMAGINARY_LIT - 65)) | (1L << (RUNE_LIT - 65)) | (1L << (STRING_LIT - 65)))) != 0)) {
				{
				State = 855;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 849; expressionList();
					}
					break;
				case 2:
					{
					State = 850; type();
					State = 853;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
					case 1:
						{
						State = 851; Match(T__7);
						State = 852; expressionList();
						}
						break;
					}
					}
					break;
				}
				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__50) {
					{
					State = 857; Match(T__50);
					}
				}

				State = 861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 860; Match(T__7);
					}
				}

				}
			}

			State = 865; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodExprContext : ParserRuleContext {
		public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(GolangParser.IDENTIFIER, 0); }
		public MethodExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterMethodExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitMethodExpr(this);
		}
	}

	[RuleVersion(0)]
	public MethodExprContext methodExpr() {
		MethodExprContext _localctx = new MethodExprContext(Context, State);
		EnterRule(_localctx, 190, RULE_methodExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; receiverType();
			State = 868; Match(T__4);
			State = 869; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverTypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		public ReceiverTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterReceiverType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitReceiverType(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverTypeContext receiverType() {
		ReceiverTypeContext _localctx = new ReceiverTypeContext(Context, State);
		EnterRule(_localctx, 192, RULE_receiverType);
		try {
			State = 881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 871; typeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 872; Match(T__2);
				State = 873; Match(T__21);
				State = 874; typeName();
				State = 875; Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 877; Match(T__2);
				State = 878; receiverType();
				State = 879; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 884; unaryExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 891;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 886;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 887;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 888; expression(2);
					}
					} 
				}
				State = 893;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 196, RULE_unaryExpr);
		int _la;
		try {
			State = 897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 894; primaryExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 895;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__26) | (1L << T__60))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 896; unaryExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterConversion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitConversion(this);
		}
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 198, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899; type();
			State = 900; Match(T__2);
			State = 901; expression(0);
			State = 903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 902; Match(T__7);
				}
			}

			State = 905; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GolangParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGolangListener typedListener = listener as IGolangListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 200, RULE_eos);
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 907; Match(T__9);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 908; Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 909;
				if (!(LineTerminatorAhead())) throw new FailedPredicateException(this, "LineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 910;
				if (!(TokenStream.LT(1).Text.Equals("}", StringComparison.Ordinal))) throw new FailedPredicateException(this, "TokenStream.LT(1).Text.Equals(\"}\", StringComparison.Ordinal)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 89: return primaryExpr_sempred((PrimaryExprContext)_localctx, predIndex);
		case 97: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 100: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool primaryExpr_sempred(PrimaryExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return LineTerminatorAhead();
		case 7: return TokenStream.LT(1).Text.Equals("}", StringComparison.Ordinal);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'M', '\x394', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\xD2', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xD5', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xDA', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xDD', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\xE8', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\xEB', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\xEE', '\n', '\x4', '\x3', '\x5', '\x5', '\x5', '\xF1', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xFA', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\xFF', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x107', '\n', '\t', '\f', '\t', '\xE', '\t', '\x10A', '\v', '\t', '\x3', 
		'\t', '\x5', '\t', '\x10D', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\x111', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x115', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x11A', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x11D', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\x122', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x125', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x12D', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x130', '\v', '\r', '\x3', '\r', '\x5', '\r', 
		'\x133', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x13C', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x146', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x150', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x153', '\v', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x156', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x15C', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x160', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x169', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x16C', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x17D', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x185', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x5', '\x1D', '\x195', '\n', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x1A5', 
		'\n', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1A9', '\n', '\"', 
		'\x3', '#', '\x3', '#', '\x5', '#', '\x1AD', '\n', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', 
		'\x1BB', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x1C2', '\n', '\'', '\x5', '\'', '\x1C4', '\n', 
		'\'', '\x3', '(', '\x3', '(', '\x5', '(', '\x1C8', '\n', '(', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1CE', '\n', ')', '\x3', 
		')', '\x5', ')', '\x1D1', '\n', ')', '\x3', ')', '\x3', ')', '\a', ')', 
		'\x1D5', '\n', ')', '\f', ')', '\xE', ')', '\x1D8', '\v', ')', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x1E3', '\n', '+', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x1E9', '\n', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\a', ',', '\x1EE', '\n', ',', '\f', ',', 
		'\xE', ',', '\x1F1', '\v', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x1F7', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x206', '\n', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x20B', 
		'\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x20E', '\v', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x213', '\n', '\x31', 
		'\f', '\x31', '\xE', '\x31', '\x216', '\v', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x221', '\n', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x224', '\n', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x22C', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x234', '\n', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x5', '\x36', '\x239', 
		'\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x23D', '\n', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x241', '\n', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x249', '\n', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x257', '\n', '\x39', '\x3', ':', '\x3', ':', 
		'\x5', ':', '\x25B', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x265', 
		'\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\a', '@', '\x278', '\n', '@', '\f', '@', '\xE', '@', '\x27B', '\v', '@', 
		'\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x28E', '\n', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x295', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x46', '\x3', '\x46', '\x5', '\x46', '\x29C', '\n', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x5', 'G', '\x2A0', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x5', 'H', '\x2A5', '\n', 'H', '\x5', 'H', '\x2A7', '\n', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', '\x2AE', 
		'\n', 'I', '\f', 'I', '\xE', 'I', '\x2B1', '\v', 'I', '\x3', 'J', '\x5', 
		'J', '\x2B4', '\n', 'J', '\x3', 'J', '\x5', 'J', '\x2B7', '\n', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x2C2', '\n', 'K', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x5', 'L', '\x2C7', '\n', 'L', '\x3', 'M', '\x3', 
		'M', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x2CD', '\n', 'N', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x2DF', '\n', 'Q', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x2E4', '\n', 'R', '\x5', 'R', 
		'\x2E6', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\a', 'S', '\x2ED', '\n', 'S', '\f', 'S', '\xE', 'S', '\x2F0', '\v', 
		'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x2F5', '\n', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', 
		'\x2FC', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x300', '\n', 
		'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\a', 
		'W', '\x307', '\n', 'W', '\f', 'W', '\xE', 'W', '\x30A', '\v', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 
		'X', '\x312', '\n', 'X', '\x3', 'X', '\x5', 'X', '\x315', '\n', 'X', '\x3', 
		'Y', '\x5', 'Y', '\x318', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', 
		'\x322', '\n', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\a', 
		'[', '\x32E', '\n', '[', '\f', '[', '\xE', '[', '\x331', '\v', '[', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', '^', '\x3', '^', '\x5', '^', '\x33C', '\n', '^', '\x3', '^', 
		'\x3', '^', '\x5', '^', '\x340', '\n', '^', '\x3', '^', '\x5', '^', '\x343', 
		'\n', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x5', '^', '\x34A', '\n', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x5', '`', '\x358', '\n', '`', '\x5', '`', 
		'\x35A', '\n', '`', '\x3', '`', '\x5', '`', '\x35D', '\n', '`', '\x3', 
		'`', '\x5', '`', '\x360', '\n', '`', '\x5', '`', '\x362', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\x374', '\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\a', '\x63', '\x37C', 
		'\n', '\x63', '\f', '\x63', '\xE', '\x63', '\x37F', '\v', '\x63', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x384', '\n', '\x64', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', 
		'\x38A', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x392', '\n', '\x66', 
		'\x3', '\x66', '\x2', '\x4', '\xB4', '\xC4', 'g', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\x2', '\b', '\x4', '\x2', '\a', '\a', '@', '@', '\x3', '\x2', 
		'\x12', '\x13', '\x3', '\x2', '\x14', '\x1E', '\x4', '\x2', '\x43', '\x46', 
		'I', 'I', '\x4', '\x2', '\x14', '\x1E', '\x37', '>', '\a', '\x2', '\x11', 
		'\x11', '\x14', '\x15', '\x17', '\x18', '\x1D', '\x1D', '?', '?', '\x2', 
		'\x3B9', '\x2', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x4', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\xE1', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\n', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xE', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x100', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x14', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x18', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x134', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x140', '\x3', '\x2', '\x2', '\x2', '\"', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x149', '\x3', '\x2', '\x2', '\x2', '&', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x16A', '\x3', '\x2', '\x2', '\x2', ',', '\x17C', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x184', '\x3', '\x2', '\x2', '\x2', '\x30', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x36', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x194', '\x3', '\x2', '\x2', '\x2', ':', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x19E', '\x3', '\x2', '\x2', '\x2', '@', '\x1A2', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1B1', '\x3', '\x2', '\x2', '\x2', 'J', '\x1B3', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1B6', '\x3', '\x2', '\x2', '\x2', 'N', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1DB', '\x3', '\x2', '\x2', '\x2', 'T', '\x1E2', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1E4', '\x3', '\x2', '\x2', '\x2', 'X', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x205', '\x3', '\x2', '\x2', '\x2', '^', '\x207', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x62', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x223', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x22B', '\x3', '\x2', '\x2', '\x2', 'h', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x238', '\x3', '\x2', '\x2', '\x2', 'l', '\x248', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x256', '\x3', '\x2', '\x2', '\x2', 'r', '\x25A', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x264', '\x3', '\x2', '\x2', '\x2', 'v', '\x266', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x26D', '\x3', '\x2', '\x2', '\x2', '|', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x272', '\x3', '\x2', '\x2', '\x2', '\x80', '\x27E', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x282', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x86', '\x294', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x296', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x299', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x90', '\x2AA', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x94', '\x2C1', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x2CC', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x2D2', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x2DE', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x2E9', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x2FB', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x301', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x311', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x317', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x31B', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x332', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x335', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x339', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x34D', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x365', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\x375', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\x385', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\x391', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\x4', 
		'\x3', '\x2', '\xCD', '\xD3', '\x5', '\xCA', '\x66', '\x2', '\xCE', '\xCF', 
		'\x5', '\x6', '\x4', '\x2', '\xCF', '\xD0', '\x5', '\xCA', '\x66', '\x2', 
		'\xD0', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\x5', '\f', '\a', '\x2', '\xD7', '\xD8', 
		'\x5', '\xCA', '\x66', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x3', 
		'\x2', '\x2', '\xDF', '\xE0', '\a', '@', '\x2', '\x2', '\xE0', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xED', '\a', '\x4', '\x2', '\x2', 
		'\xE2', '\xEE', '\x5', '\b', '\x5', '\x2', '\xE3', '\xE9', '\a', '\x5', 
		'\x2', '\x2', '\xE4', '\xE5', '\x5', '\b', '\x5', '\x2', '\xE5', '\xE6', 
		'\x5', '\xCA', '\x66', '\x2', '\xE6', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\a', '\x6', 
		'\x2', '\x2', '\xED', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xED', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xF1', '\t', '\x2', '\x2', '\x2', '\xF0', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\n', '\x6', '\x2', 
		'\xF3', '\t', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', 'I', '\x2', 
		'\x2', '\xF5', '\v', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xFA', '\x5', 
		'\xE', '\b', '\x2', '\xF7', '\xFA', '\x5', '\x1C', '\xF', '\x2', '\xF8', 
		'\xFA', '\x5', ' ', '\x11', '\x2', '\xF9', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\r', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFF', '\x5', '\x10', '\t', '\x2', '\xFC', '\xFF', '\x5', '\x18', '\r', 
		'\x2', '\xFD', '\xFF', '\x5', '$', '\x13', '\x2', '\xFE', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x10C', '\a', '\b', '\x2', '\x2', '\x101', '\x10D', '\x5', 
		'\x12', '\n', '\x2', '\x102', '\x108', '\a', '\x5', '\x2', '\x2', '\x103', 
		'\x104', '\x5', '\x12', '\n', '\x2', '\x104', '\x105', '\x5', '\xCA', 
		'\x66', '\x2', '\x105', '\x107', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\a', 
		'\x6', '\x2', '\x2', '\x10C', '\x101', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x114', '\x5', '\x14', '\v', '\x2', '\x10F', '\x111', 
		'\x5', 'p', '\x39', '\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x113', '\a', '\t', '\x2', '\x2', '\x113', 
		'\x115', '\x5', '\x16', '\f', '\x2', '\x114', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x11B', '\a', '@', '\x2', '\x2', 
		'\x117', '\x118', '\a', '\n', '\x2', '\x2', '\x118', '\x11A', '\a', '@', 
		'\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x123', '\x5', '\xC4', '\x63', '\x2', '\x11F', '\x120', '\a', '\n', '\x2', 
		'\x2', '\x120', '\x122', '\x5', '\xC4', '\x63', '\x2', '\x121', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x17', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x126', '\x132', '\a', '\v', '\x2', 
		'\x2', '\x127', '\x133', '\x5', '\x1A', '\xE', '\x2', '\x128', '\x12E', 
		'\a', '\x5', '\x2', '\x2', '\x129', '\x12A', '\x5', '\x1A', '\xE', '\x2', 
		'\x12A', '\x12B', '\a', '\f', '\x2', '\x2', '\x12B', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x133', '\a', '\x6', '\x2', '\x2', '\x132', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x128', '\x3', '\x2', '\x2', '\x2', '\x133', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\a', '@', '\x2', '\x2', 
		'\x135', '\x136', '\x5', 'p', '\x39', '\x2', '\x136', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x137', '\x138', '\a', '\r', '\x2', '\x2', '\x138', '\x13B', 
		'\a', '@', '\x2', '\x2', '\x139', '\x13C', '\x5', '\x1E', '\x10', '\x2', 
		'\x13A', '\x13C', '\x5', '\x8A', '\x46', '\x2', '\x13B', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\x8A', '\x46', 
		'\x2', '\x13E', '\x13F', '\x5', '(', '\x15', '\x2', '\x13F', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\a', '\r', '\x2', '\x2', '\x141', 
		'\x142', '\x5', '\"', '\x12', '\x2', '\x142', '\x145', '\a', '@', '\x2', 
		'\x2', '\x143', '\x146', '\x5', '\x1E', '\x10', '\x2', '\x144', '\x146', 
		'\x5', '\x8A', '\x46', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x147', '\x148', '\x5', '\x8E', 'H', '\x2', '\x148', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x155', '\a', '\xE', '\x2', '\x2', 
		'\x14A', '\x156', '\x5', '&', '\x14', '\x2', '\x14B', '\x151', '\a', '\x5', 
		'\x2', '\x2', '\x14C', '\x14D', '\x5', '&', '\x14', '\x2', '\x14D', '\x14E', 
		'\x5', '\xCA', '\x66', '\x2', '\x14E', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x150', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x154', '\x156', 
		'\a', '\x6', '\x2', '\x2', '\x155', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x156', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x157', '\x15F', '\x5', '\x14', '\v', '\x2', '\x158', '\x15B', 
		'\x5', 'p', '\x39', '\x2', '\x159', '\x15A', '\a', '\t', '\x2', '\x2', 
		'\x15A', '\x15C', '\x5', '\x16', '\f', '\x2', '\x15B', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\a', '\t', '\x2', 
		'\x2', '\x15E', '\x160', '\x5', '\x16', '\f', '\x2', '\x15F', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\'', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\xF', 
		'\x2', '\x2', '\x162', '\x163', '\x5', '*', '\x16', '\x2', '\x163', '\x164', 
		'\a', '\x10', '\x2', '\x2', '\x164', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\x5', ',', '\x17', '\x2', '\x166', '\x167', '\x5', 
		'\xCA', '\x66', '\x2', '\x167', '\x169', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16C', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x17D', '\x5', 
		'\xE', '\b', '\x2', '\x16E', '\x17D', '\x5', '>', ' ', '\x2', '\x16F', 
		'\x17D', '\x5', '.', '\x18', '\x2', '\x170', '\x17D', '\x5', 'n', '\x38', 
		'\x2', '\x171', '\x17D', '\x5', '@', '!', '\x2', '\x172', '\x17D', '\x5', 
		'\x42', '\"', '\x2', '\x173', '\x17D', '\x5', '\x44', '#', '\x2', '\x174', 
		'\x17D', '\x5', '\x46', '$', '\x2', '\x175', '\x17D', '\x5', 'H', '%', 
		'\x2', '\x176', '\x17D', '\x5', '(', '\x15', '\x2', '\x177', '\x17D', 
		'\x5', 'L', '\'', '\x2', '\x178', '\x17D', '\x5', 'N', '(', '\x2', '\x179', 
		'\x17D', '\x5', '`', '\x31', '\x2', '\x17A', '\x17D', '\x5', 'h', '\x35', 
		'\x2', '\x17B', '\x17D', '\x5', 'J', '&', '\x2', '\x17C', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x171', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x174', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x176', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '-', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x185', '\x5', '\x32', 
		'\x1A', '\x2', '\x17F', '\x185', '\x5', '\x30', '\x19', '\x2', '\x180', 
		'\x185', '\x5', '\x34', '\x1B', '\x2', '\x181', '\x185', '\x5', '\x36', 
		'\x1C', '\x2', '\x182', '\x185', '\x5', ':', '\x1E', '\x2', '\x183', '\x185', 
		'\x5', '<', '\x1F', '\x2', '\x184', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x184', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x181', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x182', '\x3', '\x2', '\x2', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '/', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x5', 
		'\xC4', '\x63', '\x2', '\x187', '\x31', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x189', '\x5', '\xC4', '\x63', '\x2', '\x189', '\x18A', '\a', '\x11', 
		'\x2', '\x2', '\x18A', '\x18B', '\x5', '\xC4', '\x63', '\x2', '\x18B', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\x5', '\xC4', '\x63', 
		'\x2', '\x18D', '\x18E', '\t', '\x3', '\x2', '\x2', '\x18E', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x190', '\x5', '\x16', '\f', '\x2', '\x190', 
		'\x191', '\x5', '\x38', '\x1D', '\x2', '\x191', '\x192', '\x5', '\x16', 
		'\f', '\x2', '\x192', '\x37', '\x3', '\x2', '\x2', '\x2', '\x193', '\x195', 
		'\t', '\x4', '\x2', '\x2', '\x194', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x195', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x197', '\a', '\t', '\x2', '\x2', '\x197', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\x5', '\x14', '\v', 
		'\x2', '\x199', '\x19A', '\a', '\x1F', '\x2', '\x2', '\x19A', '\x19B', 
		'\x5', '\x16', '\f', '\x2', '\x19B', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19D', '\a', '\f', '\x2', '\x2', '\x19D', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x19E', '\x19F', '\a', '@', '\x2', '\x2', '\x19F', '\x1A0', 
		'\a', ' ', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', ',', '\x17', '\x2', 
		'\x1A1', '?', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A4', '\a', '!', 
		'\x2', '\x2', '\x1A3', '\x1A5', '\x5', '\x16', '\f', '\x2', '\x1A4', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A8', '\a', '\"', 
		'\x2', '\x2', '\x1A7', '\x1A9', '\a', '@', '\x2', '\x2', '\x1A8', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AC', '\a', '#', 
		'\x2', '\x2', '\x1AB', '\x1AD', '\a', '@', '\x2', '\x2', '\x1AC', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\a', '$', 
		'\x2', '\x2', '\x1AF', '\x1B0', '\a', '@', '\x2', '\x2', '\x1B0', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\a', '%', '\x2', '\x2', 
		'\x1B2', 'I', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '&', 
		'\x2', '\x2', '\x1B4', '\x1B5', '\x5', '\xC4', '\x63', '\x2', '\x1B5', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1BA', '\a', '\'', '\x2', 
		'\x2', '\x1B7', '\x1B8', '\x5', '.', '\x18', '\x2', '\x1B8', '\x1B9', 
		'\a', '\f', '\x2', '\x2', '\x1B9', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\x5', '\xC4', '\x63', '\x2', '\x1BD', '\x1C3', '\x5', '(', '\x15', 
		'\x2', '\x1BE', '\x1C1', '\a', '(', '\x2', '\x2', '\x1BF', '\x1C2', '\x5', 
		'L', '\'', '\x2', '\x1C0', '\x1C2', '\x5', '(', '\x15', '\x2', '\x1C1', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C0', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', 'M', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C8', '\x5', 'P', 
		')', '\x2', '\x1C6', '\x1C8', '\x5', 'V', ',', '\x2', '\x1C7', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', 'O', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CD', '\a', ')', 
		'\x2', '\x2', '\x1CA', '\x1CB', '\x5', '.', '\x18', '\x2', '\x1CB', '\x1CC', 
		'\a', '\f', '\x2', '\x2', '\x1CC', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'\x1D1', '\x5', '\xC4', '\x63', '\x2', '\x1D0', '\x1CF', '\x3', '\x2', 
		'\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D6', '\a', '\xF', '\x2', '\x2', 
		'\x1D3', '\x1D5', '\x5', 'R', '*', '\x2', '\x1D4', '\x1D3', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'\x1D7', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '\x10', '\x2', '\x2', '\x1DA', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x5', 'T', '+', '\x2', 
		'\x1DC', '\x1DD', '\a', ' ', '\x2', '\x2', '\x1DD', '\x1DE', '\x5', '*', 
		'\x16', '\x2', '\x1DE', 'S', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', 
		'\a', '*', '\x2', '\x2', '\x1E0', '\x1E3', '\x5', '\x16', '\f', '\x2', 
		'\x1E1', '\x1E3', '\a', '+', '\x2', '\x2', '\x1E2', '\x1DF', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E8', '\a', ')', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\x5', '.', '\x18', '\x2', '\x1E6', '\x1E7', '\a', '\f', 
		'\x2', '\x2', '\x1E7', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x5', 
		'X', '-', '\x2', '\x1EB', '\x1EF', '\a', '\xF', '\x2', '\x2', '\x1EC', 
		'\x1EE', '\x5', 'Z', '.', '\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1EF', '\x3', 
		'\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\a', '\x10', '\x2', '\x2', '\x1F3', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\a', '@', '\x2', '\x2', 
		'\x1F5', '\x1F7', '\a', '\x1F', '\x2', '\x2', '\x1F6', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F7', 
		'\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\x5', '\xB4', 
		'[', '\x2', '\x1F9', '\x1FA', '\a', '\a', '\x2', '\x2', '\x1FA', '\x1FB', 
		'\a', '\x5', '\x2', '\x2', '\x1FB', '\x1FC', '\a', '\v', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\a', '\x6', '\x2', '\x2', '\x1FD', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x1FF', '\x5', '\\', '/', '\x2', '\x1FF', '\x200', 
		'\a', ' ', '\x2', '\x2', '\x200', '\x201', '\x5', '*', '\x16', '\x2', 
		'\x201', '[', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\a', '*', 
		'\x2', '\x2', '\x203', '\x206', '\x5', '^', '\x30', '\x2', '\x204', '\x206', 
		'\a', '+', '\x2', '\x2', '\x205', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x204', '\x3', '\x2', '\x2', '\x2', '\x206', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x207', '\x20C', '\x5', 'p', '\x39', '\x2', '\x208', '\x209', 
		'\a', '\n', '\x2', '\x2', '\x209', '\x20B', '\x5', 'p', '\x39', '\x2', 
		'\x20A', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20E', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20D', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', 
		'\a', ',', '\x2', '\x2', '\x210', '\x214', '\a', '\xF', '\x2', '\x2', 
		'\x211', '\x213', '\x5', '\x62', '\x32', '\x2', '\x212', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x216', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x212', '\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x217', '\x3', '\x2', '\x2', '\x2', '\x216', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\a', '\x10', '\x2', '\x2', 
		'\x218', '\x61', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\x5', 
		'\x64', '\x33', '\x2', '\x21A', '\x21B', '\a', ' ', '\x2', '\x2', '\x21B', 
		'\x21C', '\x5', '*', '\x16', '\x2', '\x21C', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x21D', '\x220', '\a', '*', '\x2', '\x2', '\x21E', '\x221', '\x5', 
		'\x32', '\x1A', '\x2', '\x21F', '\x221', '\x5', '\x66', '\x34', '\x2', 
		'\x220', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x220', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x221', '\x224', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x224', '\a', '+', '\x2', '\x2', '\x223', '\x21D', '\x3', '\x2', '\x2', 
		'\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', '\x224', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\x5', '\x16', '\f', '\x2', 
		'\x226', '\x227', '\a', '\t', '\x2', '\x2', '\x227', '\x22C', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x229', '\x5', '\x14', '\v', '\x2', '\x229', '\x22A', 
		'\a', '\x1F', '\x2', '\x2', '\x22A', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22B', '\x225', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x5', '\xC4', 
		'\x63', '\x2', '\x22E', 'g', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x233', 
		'\a', '-', '\x2', '\x2', '\x230', '\x234', '\x5', '\xC4', '\x63', '\x2', 
		'\x231', '\x234', '\x5', 'j', '\x36', '\x2', '\x232', '\x234', '\x5', 
		'l', '\x37', '\x2', '\x233', '\x230', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x231', '\x3', '\x2', '\x2', '\x2', '\x233', '\x232', '\x3', '\x2', '\x2', 
		'\x2', '\x233', '\x234', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', 
		'\x3', '\x2', '\x2', '\x2', '\x235', '\x236', '\x5', '(', '\x15', '\x2', 
		'\x236', 'i', '\x3', '\x2', '\x2', '\x2', '\x237', '\x239', '\x5', '.', 
		'\x18', '\x2', '\x238', '\x237', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', 
		'\x2', '\x23A', '\x23C', '\a', '\f', '\x2', '\x2', '\x23B', '\x23D', '\x5', 
		'\xC4', '\x63', '\x2', '\x23C', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', 
		'\x2', '\x23E', '\x240', '\a', '\f', '\x2', '\x2', '\x23F', '\x241', '\x5', 
		'.', '\x18', '\x2', '\x240', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x241', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x243', '\x5', '\x16', '\f', '\x2', '\x243', '\x244', 
		'\a', '\t', '\x2', '\x2', '\x244', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x245', '\x246', '\x5', '\x14', '\v', '\x2', '\x246', '\x247', '\a', 
		'\x1F', '\x2', '\x2', '\x247', '\x249', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x248', '\x245', '\x3', '\x2', '\x2', 
		'\x2', '\x248', '\x249', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24A', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\a', '.', '\x2', '\x2', 
		'\x24B', '\x24C', '\x5', '\xC4', '\x63', '\x2', '\x24C', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x24D', '\x24E', '\a', '/', '\x2', '\x2', '\x24E', '\x24F', 
		'\x5', '\xC4', '\x63', '\x2', '\x24F', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x257', '\x5', 'r', ':', '\x2', '\x251', '\x257', '\x5', 't', 
		';', '\x2', '\x252', '\x253', '\a', '\x5', '\x2', '\x2', '\x253', '\x254', 
		'\x5', 'p', '\x39', '\x2', '\x254', '\x255', '\a', '\x6', '\x2', '\x2', 
		'\x255', '\x257', '\x3', '\x2', '\x2', '\x2', '\x256', '\x250', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x251', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x252', '\x3', '\x2', '\x2', '\x2', '\x257', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x25B', '\a', '@', '\x2', '\x2', '\x259', '\x25B', '\x5', 
		'\x9C', 'O', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x25B', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x25C', '\x265', '\x5', 'v', '<', '\x2', '\x25D', '\x265', '\x5', 
		'\xAC', 'W', '\x2', '\x25E', '\x265', '\x5', '|', '?', '\x2', '\x25F', 
		'\x265', '\x5', '\x88', '\x45', '\x2', '\x260', '\x265', '\x5', '~', '@', 
		'\x2', '\x261', '\x265', '\x5', '\x80', '\x41', '\x2', '\x262', '\x265', 
		'\x5', '\x82', '\x42', '\x2', '\x263', '\x265', '\x5', '\x84', '\x43', 
		'\x2', '\x264', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x264', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x264', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x264', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x264', '\x260', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x261', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x264', '\x263', '\x3', '\x2', '\x2', 
		'\x2', '\x265', 'u', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\a', 
		'\x30', '\x2', '\x2', '\x267', '\x268', '\x5', 'x', '=', '\x2', '\x268', 
		'\x269', '\a', '\x31', '\x2', '\x2', '\x269', '\x26A', '\x5', 'z', '>', 
		'\x2', '\x26A', 'w', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x5', 
		'\xC4', '\x63', '\x2', '\x26C', 'y', '\x3', '\x2', '\x2', '\x2', '\x26D', 
		'\x26E', '\x5', 'p', '\x39', '\x2', '\x26E', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x26F', '\x270', '\a', '\x18', '\x2', '\x2', '\x270', '\x271', 
		'\x5', 'p', '\x39', '\x2', '\x271', '}', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x273', '\a', '\x32', '\x2', '\x2', '\x273', '\x279', '\a', '\xF', '\x2', 
		'\x2', '\x274', '\x275', '\x5', '\x86', '\x44', '\x2', '\x275', '\x276', 
		'\x5', '\xCA', '\x66', '\x2', '\x276', '\x278', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x274', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27B', '\x3', 
		'\x2', '\x2', '\x2', '\x279', '\x277', '\x3', '\x2', '\x2', '\x2', '\x279', 
		'\x27A', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27C', '\x3', '\x2', '\x2', 
		'\x2', '\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27D', 
		'\a', '\x10', '\x2', '\x2', '\x27D', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x27F', '\a', '\x30', '\x2', '\x2', '\x27F', '\x280', '\a', 
		'\x31', '\x2', '\x2', '\x280', '\x281', '\x5', 'z', '>', '\x2', '\x281', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\a', '\x33', '\x2', 
		'\x2', '\x283', '\x284', '\a', '\x30', '\x2', '\x2', '\x284', '\x285', 
		'\x5', 'p', '\x39', '\x2', '\x285', '\x286', '\a', '\x31', '\x2', '\x2', 
		'\x286', '\x287', '\x5', 'z', '>', '\x2', '\x287', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x28E', '\a', '\x34', '\x2', '\x2', '\x289', '\x28A', 
		'\a', '\x34', '\x2', '\x2', '\x28A', '\x28E', '\a', '\x11', '\x2', '\x2', 
		'\x28B', '\x28C', '\a', '\x11', '\x2', '\x2', '\x28C', '\x28E', '\a', 
		'\x34', '\x2', '\x2', '\x28D', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28D', 
		'\x289', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28B', '\x3', '\x2', '\x2', 
		'\x2', '\x28E', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x290', 
		'\x5', 'z', '>', '\x2', '\x290', '\x85', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x292', '\a', '@', '\x2', '\x2', '\x292', '\x295', '\x5', '\x8A', '\x46', 
		'\x2', '\x293', '\x295', '\x5', 'r', ':', '\x2', '\x294', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x293', '\x3', '\x2', '\x2', '\x2', '\x295', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', '\a', '\r', '\x2', 
		'\x2', '\x297', '\x298', '\x5', '\x8A', '\x46', '\x2', '\x298', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x299', '\x29B', '\x5', '\x8E', 'H', '\x2', 
		'\x29A', '\x29C', '\x5', '\x8C', 'G', '\x2', '\x29B', '\x29A', '\x3', 
		'\x2', '\x2', '\x2', '\x29B', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29C', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x2A0', '\x5', '\x8E', 'H', 
		'\x2', '\x29E', '\x2A0', '\x5', 'p', '\x39', '\x2', '\x29F', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29F', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x2A0', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A6', '\a', '\x5', 
		'\x2', '\x2', '\x2A2', '\x2A4', '\x5', '\x90', 'I', '\x2', '\x2A3', '\x2A5', 
		'\a', '\n', '\x2', '\x2', '\x2A4', '\x2A3', '\x3', '\x2', '\x2', '\x2', 
		'\x2A4', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A7', '\x3', 
		'\x2', '\x2', '\x2', '\x2A6', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A9', '\a', '\x6', '\x2', '\x2', '\x2A9', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x2AF', '\x5', '\x92', 'J', '\x2', '\x2AB', 
		'\x2AC', '\a', '\n', '\x2', '\x2', '\x2AC', '\x2AE', '\x5', '\x92', 'J', 
		'\x2', '\x2AD', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x2AF', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x2B1', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2B2', 
		'\x2B4', '\x5', '\x14', '\v', '\x2', '\x2B3', '\x2B2', '\x3', '\x2', '\x2', 
		'\x2', '\x2B3', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B6', 
		'\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B7', '\a', '\x35', '\x2', '\x2', 
		'\x2B6', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', '\x3', 
		'\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B8', 
		'\x2B9', '\x5', 'p', '\x39', '\x2', '\x2B9', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2C2', '\x5', '\x96', 'L', '\x2', '\x2BB', '\x2C2', 
		'\x5', '\x9A', 'N', '\x2', '\x2BC', '\x2C2', '\x5', '\xC0', '\x61', '\x2', 
		'\x2BD', '\x2BE', '\a', '\x5', '\x2', '\x2', '\x2BE', '\x2BF', '\x5', 
		'\xC4', '\x63', '\x2', '\x2BF', '\x2C0', '\a', '\x6', '\x2', '\x2', '\x2C0', 
		'\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x2C1', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2C2', '\x95', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C7', '\x5', 
		'\x98', 'M', '\x2', '\x2C4', '\x2C7', '\x5', '\x9E', 'P', '\x2', '\x2C5', 
		'\x2C7', '\x5', '\xB2', 'Z', '\x2', '\x2C6', '\x2C3', '\x3', '\x2', '\x2', 
		'\x2', '\x2C6', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C5', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x2C8', '\x2C9', '\t', '\x5', '\x2', '\x2', '\x2C9', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x2CA', '\x2CD', '\a', '@', '\x2', '\x2', '\x2CB', '\x2CD', 
		'\x5', '\x9C', 'O', '\x2', '\x2CC', '\x2CA', '\x3', '\x2', '\x2', '\x2', 
		'\x2CC', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\a', '@', '\x2', '\x2', '\x2CF', 
		'\x2D0', '\a', '\a', '\x2', '\x2', '\x2D0', '\x2D1', '\a', '@', '\x2', 
		'\x2', '\x2D1', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D3', 
		'\x5', '\xA0', 'Q', '\x2', '\x2D3', '\x2D4', '\x5', '\xA2', 'R', '\x2', 
		'\x2D4', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2DF', '\x5', 
		'\xAC', 'W', '\x2', '\x2D6', '\x2DF', '\x5', 'v', '<', '\x2', '\x2D7', 
		'\x2D8', '\a', '\x30', '\x2', '\x2', '\x2D8', '\x2D9', '\a', '\x35', '\x2', 
		'\x2', '\x2D9', '\x2DA', '\a', '\x31', '\x2', '\x2', '\x2DA', '\x2DF', 
		'\x5', 'z', '>', '\x2', '\x2DB', '\x2DF', '\x5', '\x80', '\x41', '\x2', 
		'\x2DC', '\x2DF', '\x5', '\x82', '\x42', '\x2', '\x2DD', '\x2DF', '\x5', 
		'r', ':', '\x2', '\x2DE', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2D7', '\x3', '\x2', '\x2', 
		'\x2', '\x2DE', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DD', '\x3', '\x2', '\x2', '\x2', 
		'\x2DF', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2E5', '\a', '\xF', 
		'\x2', '\x2', '\x2E1', '\x2E3', '\x5', '\xA4', 'S', '\x2', '\x2E2', '\x2E4', 
		'\a', '\n', '\x2', '\x2', '\x2E3', '\x2E2', '\x3', '\x2', '\x2', '\x2', 
		'\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E6', '\x3', 
		'\x2', '\x2', '\x2', '\x2E5', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E5', 
		'\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E7', '\x3', '\x2', '\x2', 
		'\x2', '\x2E7', '\x2E8', '\a', '\x10', '\x2', '\x2', '\x2E8', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EE', '\x5', '\xA6', 'T', '\x2', 
		'\x2EA', '\x2EB', '\a', '\n', '\x2', '\x2', '\x2EB', '\x2ED', '\x5', '\xA6', 
		'T', '\x2', '\x2EC', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EC', '\x3', '\x2', '\x2', '\x2', 
		'\x2EE', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x2F0', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F1', 
		'\x2F2', '\x5', '\xA8', 'U', '\x2', '\x2F2', '\x2F3', '\a', ' ', '\x2', 
		'\x2', '\x2F3', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F1', 
		'\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x2F5', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\x5', 
		'\xAA', 'V', '\x2', '\x2F7', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2FC', '\a', '@', '\x2', '\x2', '\x2F9', '\x2FC', '\x5', '\xC4', '\x63', 
		'\x2', '\x2FA', '\x2FC', '\x5', '\xA2', 'R', '\x2', '\x2FB', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2F9', '\x3', '\x2', '\x2', '\x2', 
		'\x2FB', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\x2FD', '\x300', '\x5', '\xC4', '\x63', '\x2', '\x2FE', 
		'\x300', '\x5', '\xA2', 'R', '\x2', '\x2FF', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2FF', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x300', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\a', '\x36', '\x2', '\x2', 
		'\x302', '\x308', '\a', '\xF', '\x2', '\x2', '\x303', '\x304', '\x5', 
		'\xAE', 'X', '\x2', '\x304', '\x305', '\x5', '\xCA', '\x66', '\x2', '\x305', 
		'\x307', '\x3', '\x2', '\x2', '\x2', '\x306', '\x303', '\x3', '\x2', '\x2', 
		'\x2', '\x307', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x308', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x309', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', '\x3', 
		'\x2', '\x2', '\x2', '\x30B', '\x30C', '\a', '\x10', '\x2', '\x2', '\x30C', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30E', '\x5', '\x14', '\v', 
		'\x2', '\x30E', '\x30F', '\x5', 'p', '\x39', '\x2', '\x30F', '\x312', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x312', '\x5', '\xB0', 'Y', '\x2', 
		'\x311', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x311', '\x310', '\x3', 
		'\x2', '\x2', '\x2', '\x312', '\x314', '\x3', '\x2', '\x2', '\x2', '\x313', 
		'\x315', '\a', 'I', '\x2', '\x2', '\x314', '\x313', '\x3', '\x2', '\x2', 
		'\x2', '\x314', '\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\x316', '\x318', '\a', '\x18', '\x2', '\x2', 
		'\x317', '\x316', '\x3', '\x2', '\x2', '\x2', '\x317', '\x318', '\x3', 
		'\x2', '\x2', '\x2', '\x318', '\x319', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x31A', '\x5', 'r', ':', '\x2', '\x31A', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x31B', '\x31C', '\a', '\r', '\x2', '\x2', '\x31C', '\x31D', '\x5', 
		'\x1E', '\x10', '\x2', '\x31D', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x31E', 
		'\x31F', '\b', '[', '\x1', '\x2', '\x31F', '\x322', '\x5', '\x94', 'K', 
		'\x2', '\x320', '\x322', '\x5', '\xC8', '\x65', '\x2', '\x321', '\x31E', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x320', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', '\f', 
		'\a', '\x2', '\x2', '\x324', '\x32E', '\x5', '\xB6', '\\', '\x2', '\x325', 
		'\x326', '\f', '\x6', '\x2', '\x2', '\x326', '\x32E', '\x5', '\xB8', ']', 
		'\x2', '\x327', '\x328', '\f', '\x5', '\x2', '\x2', '\x328', '\x32E', 
		'\x5', '\xBA', '^', '\x2', '\x329', '\x32A', '\f', '\x4', '\x2', '\x2', 
		'\x32A', '\x32E', '\x5', '\xBC', '_', '\x2', '\x32B', '\x32C', '\f', '\x3', 
		'\x2', '\x2', '\x32C', '\x32E', '\x5', '\xBE', '`', '\x2', '\x32D', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\x32D', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x32D', '\x327', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x329', '\x3', 
		'\x2', '\x2', '\x2', '\x32D', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32E', 
		'\x331', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x32D', '\x3', '\x2', '\x2', 
		'\x2', '\x32F', '\x330', '\x3', '\x2', '\x2', '\x2', '\x330', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x331', '\x32F', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x333', '\a', '\a', '\x2', '\x2', '\x333', '\x334', '\a', '@', 
		'\x2', '\x2', '\x334', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x335', '\x336', 
		'\a', '\x30', '\x2', '\x2', '\x336', '\x337', '\x5', '\xC4', '\x63', '\x2', 
		'\x337', '\x338', '\a', '\x31', '\x2', '\x2', '\x338', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x339', '\x349', '\a', '\x30', '\x2', '\x2', '\x33A', 
		'\x33C', '\x5', '\xC4', '\x63', '\x2', '\x33B', '\x33A', '\x3', '\x2', 
		'\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x33D', '\x33F', '\a', ' ', '\x2', '\x2', 
		'\x33E', '\x340', '\x5', '\xC4', '\x63', '\x2', '\x33F', '\x33E', '\x3', 
		'\x2', '\x2', '\x2', '\x33F', '\x340', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x34A', '\x3', '\x2', '\x2', '\x2', '\x341', '\x343', '\x5', '\xC4', 
		'\x63', '\x2', '\x342', '\x341', '\x3', '\x2', '\x2', '\x2', '\x342', 
		'\x343', '\x3', '\x2', '\x2', '\x2', '\x343', '\x344', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x345', '\a', ' ', '\x2', '\x2', '\x345', '\x346', '\x5', 
		'\xC4', '\x63', '\x2', '\x346', '\x347', '\a', ' ', '\x2', '\x2', '\x347', 
		'\x348', '\x5', '\xC4', '\x63', '\x2', '\x348', '\x34A', '\x3', '\x2', 
		'\x2', '\x2', '\x349', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x349', '\x342', 
		'\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x34B', '\x34C', '\a', '\x31', '\x2', '\x2', '\x34C', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x34E', '\a', '\a', '\x2', '\x2', '\x34E', 
		'\x34F', '\a', '\x5', '\x2', '\x2', '\x34F', '\x350', '\x5', 'p', '\x39', 
		'\x2', '\x350', '\x351', '\a', '\x6', '\x2', '\x2', '\x351', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\x352', '\x361', '\a', '\x5', '\x2', '\x2', '\x353', 
		'\x35A', '\x5', '\x16', '\f', '\x2', '\x354', '\x357', '\x5', 'p', '\x39', 
		'\x2', '\x355', '\x356', '\a', '\n', '\x2', '\x2', '\x356', '\x358', '\x5', 
		'\x16', '\f', '\x2', '\x357', '\x355', '\x3', '\x2', '\x2', '\x2', '\x357', 
		'\x358', '\x3', '\x2', '\x2', '\x2', '\x358', '\x35A', '\x3', '\x2', '\x2', 
		'\x2', '\x359', '\x353', '\x3', '\x2', '\x2', '\x2', '\x359', '\x354', 
		'\x3', '\x2', '\x2', '\x2', '\x35A', '\x35C', '\x3', '\x2', '\x2', '\x2', 
		'\x35B', '\x35D', '\a', '\x35', '\x2', '\x2', '\x35C', '\x35B', '\x3', 
		'\x2', '\x2', '\x2', '\x35C', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35D', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\x35E', '\x360', '\a', '\n', '\x2', 
		'\x2', '\x35F', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', 
		'\x3', '\x2', '\x2', '\x2', '\x360', '\x362', '\x3', '\x2', '\x2', '\x2', 
		'\x361', '\x359', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', '\x3', 
		'\x2', '\x2', '\x2', '\x362', '\x363', '\x3', '\x2', '\x2', '\x2', '\x363', 
		'\x364', '\a', '\x6', '\x2', '\x2', '\x364', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\x365', '\x366', '\x5', '\xC2', '\x62', '\x2', '\x366', '\x367', 
		'\a', '\a', '\x2', '\x2', '\x367', '\x368', '\a', '@', '\x2', '\x2', '\x368', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x369', '\x374', '\x5', 'r', ':', 
		'\x2', '\x36A', '\x36B', '\a', '\x5', '\x2', '\x2', '\x36B', '\x36C', 
		'\a', '\x18', '\x2', '\x2', '\x36C', '\x36D', '\x5', 'r', ':', '\x2', 
		'\x36D', '\x36E', '\a', '\x6', '\x2', '\x2', '\x36E', '\x374', '\x3', 
		'\x2', '\x2', '\x2', '\x36F', '\x370', '\a', '\x5', '\x2', '\x2', '\x370', 
		'\x371', '\x5', '\xC2', '\x62', '\x2', '\x371', '\x372', '\a', '\x6', 
		'\x2', '\x2', '\x372', '\x374', '\x3', '\x2', '\x2', '\x2', '\x373', '\x369', 
		'\x3', '\x2', '\x2', '\x2', '\x373', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\x373', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x374', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\x375', '\x376', '\b', '\x63', '\x1', '\x2', '\x376', 
		'\x377', '\x5', '\xC6', '\x64', '\x2', '\x377', '\x37D', '\x3', '\x2', 
		'\x2', '\x2', '\x378', '\x379', '\f', '\x3', '\x2', '\x2', '\x379', '\x37A', 
		'\t', '\x6', '\x2', '\x2', '\x37A', '\x37C', '\x5', '\xC4', '\x63', '\x4', 
		'\x37B', '\x378', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37F', '\x3', 
		'\x2', '\x2', '\x2', '\x37D', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x37D', 
		'\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x37F', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x380', '\x384', 
		'\x5', '\xB4', '[', '\x2', '\x381', '\x382', '\t', '\a', '\x2', '\x2', 
		'\x382', '\x384', '\x5', '\xC6', '\x64', '\x2', '\x383', '\x380', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x381', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x385', '\x386', '\x5', 'p', '\x39', 
		'\x2', '\x386', '\x387', '\a', '\x5', '\x2', '\x2', '\x387', '\x389', 
		'\x5', '\xC4', '\x63', '\x2', '\x388', '\x38A', '\a', '\n', '\x2', '\x2', 
		'\x389', '\x388', '\x3', '\x2', '\x2', '\x2', '\x389', '\x38A', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38C', '\a', '\x6', '\x2', '\x2', '\x38C', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\x38D', '\x392', '\a', '\f', '\x2', '\x2', '\x38E', '\x392', '\a', 
		'\x2', '\x2', '\x3', '\x38F', '\x392', '\x6', '\x66', '\b', '\x2', '\x390', 
		'\x392', '\x6', '\x66', '\t', '\x2', '\x391', '\x38D', '\x3', '\x2', '\x2', 
		'\x2', '\x391', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x391', '\x38F', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x390', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\xCB', '\x3', '\x2', '\x2', '\x2', '`', '\xD3', '\xDB', '\xE9', 
		'\xED', '\xF0', '\xF9', '\xFE', '\x108', '\x10C', '\x110', '\x114', '\x11B', 
		'\x123', '\x12E', '\x132', '\x13B', '\x145', '\x151', '\x155', '\x15B', 
		'\x15F', '\x16A', '\x17C', '\x184', '\x194', '\x1A4', '\x1A8', '\x1AC', 
		'\x1BA', '\x1C1', '\x1C3', '\x1C7', '\x1CD', '\x1D0', '\x1D6', '\x1E2', 
		'\x1E8', '\x1EF', '\x1F6', '\x205', '\x20C', '\x214', '\x220', '\x223', 
		'\x22B', '\x233', '\x238', '\x23C', '\x240', '\x248', '\x256', '\x25A', 
		'\x264', '\x279', '\x28D', '\x294', '\x29B', '\x29F', '\x2A4', '\x2A6', 
		'\x2AF', '\x2B3', '\x2B6', '\x2C1', '\x2C6', '\x2CC', '\x2DE', '\x2E3', 
		'\x2E5', '\x2EE', '\x2F4', '\x2FB', '\x2FF', '\x308', '\x311', '\x314', 
		'\x317', '\x321', '\x32D', '\x32F', '\x33B', '\x33F', '\x342', '\x349', 
		'\x357', '\x359', '\x35C', '\x35F', '\x361', '\x373', '\x37D', '\x383', 
		'\x389', '\x391',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
