//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Golang.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GolangParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IGolangListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.sourceFile"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceFile([NotNull] GolangParser.SourceFileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.sourceFile"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceFile([NotNull] GolangParser.SourceFileContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.packageClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPackageClause([NotNull] GolangParser.PackageClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.packageClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPackageClause([NotNull] GolangParser.PackageClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.importDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportDecl([NotNull] GolangParser.ImportDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.importDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportDecl([NotNull] GolangParser.ImportDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.importSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportSpec([NotNull] GolangParser.ImportSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.importSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportSpec([NotNull] GolangParser.ImportSpecContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.importPath"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportPath([NotNull] GolangParser.ImportPathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.importPath"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportPath([NotNull] GolangParser.ImportPathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.topLevelDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTopLevelDecl([NotNull] GolangParser.TopLevelDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.topLevelDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTopLevelDecl([NotNull] GolangParser.TopLevelDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] GolangParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] GolangParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.constDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstDecl([NotNull] GolangParser.ConstDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.constDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstDecl([NotNull] GolangParser.ConstDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.constSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstSpec([NotNull] GolangParser.ConstSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.constSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstSpec([NotNull] GolangParser.ConstSpecContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierList([NotNull] GolangParser.IdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierList([NotNull] GolangParser.IdentifierListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] GolangParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] GolangParser.ExpressionListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDecl([NotNull] GolangParser.TypeDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDecl([NotNull] GolangParser.TypeDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeSpec([NotNull] GolangParser.TypeSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeSpec([NotNull] GolangParser.TypeSpecContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDecl([NotNull] GolangParser.FunctionDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDecl([NotNull] GolangParser.FunctionDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction([NotNull] GolangParser.FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction([NotNull] GolangParser.FunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDecl([NotNull] GolangParser.MethodDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDecl([NotNull] GolangParser.MethodDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.receiver"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReceiver([NotNull] GolangParser.ReceiverContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.receiver"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReceiver([NotNull] GolangParser.ReceiverContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDecl([NotNull] GolangParser.VarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDecl([NotNull] GolangParser.VarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.varSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarSpec([NotNull] GolangParser.VarSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.varSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarSpec([NotNull] GolangParser.VarSpecContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] GolangParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] GolangParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] GolangParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] GolangParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] GolangParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] GolangParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.simpleStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleStmt([NotNull] GolangParser.SimpleStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.simpleStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleStmt([NotNull] GolangParser.SimpleStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.expressionStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStmt([NotNull] GolangParser.ExpressionStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.expressionStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStmt([NotNull] GolangParser.ExpressionStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.sendStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSendStmt([NotNull] GolangParser.SendStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.sendStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSendStmt([NotNull] GolangParser.SendStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.incDecStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncDecStmt([NotNull] GolangParser.IncDecStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.incDecStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncDecStmt([NotNull] GolangParser.IncDecStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] GolangParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] GolangParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.assign_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_op([NotNull] GolangParser.Assign_opContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.assign_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_op([NotNull] GolangParser.Assign_opContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.shortVarDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShortVarDecl([NotNull] GolangParser.ShortVarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.shortVarDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShortVarDecl([NotNull] GolangParser.ShortVarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.emptyStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStmt([NotNull] GolangParser.EmptyStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.emptyStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStmt([NotNull] GolangParser.EmptyStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.labeledStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabeledStmt([NotNull] GolangParser.LabeledStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.labeledStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabeledStmt([NotNull] GolangParser.LabeledStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] GolangParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.returnStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] GolangParser.ReturnStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.breakStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStmt([NotNull] GolangParser.BreakStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.breakStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStmt([NotNull] GolangParser.BreakStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.continueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStmt([NotNull] GolangParser.ContinueStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.continueStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStmt([NotNull] GolangParser.ContinueStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.gotoStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGotoStmt([NotNull] GolangParser.GotoStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.gotoStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGotoStmt([NotNull] GolangParser.GotoStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.fallthroughStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFallthroughStmt([NotNull] GolangParser.FallthroughStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.fallthroughStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFallthroughStmt([NotNull] GolangParser.FallthroughStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.deferStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeferStmt([NotNull] GolangParser.DeferStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.deferStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeferStmt([NotNull] GolangParser.DeferStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] GolangParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] GolangParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.switchStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStmt([NotNull] GolangParser.SwitchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.switchStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStmt([NotNull] GolangParser.SwitchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.exprSwitchStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprSwitchStmt([NotNull] GolangParser.ExprSwitchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.exprSwitchStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprSwitchStmt([NotNull] GolangParser.ExprSwitchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.exprCaseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprCaseClause([NotNull] GolangParser.ExprCaseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.exprCaseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprCaseClause([NotNull] GolangParser.ExprCaseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.exprSwitchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprSwitchCase([NotNull] GolangParser.ExprSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.exprSwitchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprSwitchCase([NotNull] GolangParser.ExprSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeSwitchStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeSwitchStmt([NotNull] GolangParser.TypeSwitchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeSwitchStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeSwitchStmt([NotNull] GolangParser.TypeSwitchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeSwitchGuard"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeSwitchGuard([NotNull] GolangParser.TypeSwitchGuardContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeSwitchGuard"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeSwitchGuard([NotNull] GolangParser.TypeSwitchGuardContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeCaseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeCaseClause([NotNull] GolangParser.TypeCaseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeCaseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeCaseClause([NotNull] GolangParser.TypeCaseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeSwitchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeSwitchCase([NotNull] GolangParser.TypeSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeSwitchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeSwitchCase([NotNull] GolangParser.TypeSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeList([NotNull] GolangParser.TypeListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeList([NotNull] GolangParser.TypeListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.selectStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectStmt([NotNull] GolangParser.SelectStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.selectStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectStmt([NotNull] GolangParser.SelectStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.commClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommClause([NotNull] GolangParser.CommClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.commClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommClause([NotNull] GolangParser.CommClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.commCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommCase([NotNull] GolangParser.CommCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.commCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommCase([NotNull] GolangParser.CommCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.recvStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecvStmt([NotNull] GolangParser.RecvStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.recvStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecvStmt([NotNull] GolangParser.RecvStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.forStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStmt([NotNull] GolangParser.ForStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.forStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStmt([NotNull] GolangParser.ForStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.forClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForClause([NotNull] GolangParser.ForClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.forClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForClause([NotNull] GolangParser.ForClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.rangeClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRangeClause([NotNull] GolangParser.RangeClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.rangeClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRangeClause([NotNull] GolangParser.RangeClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.goStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoStmt([NotNull] GolangParser.GoStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.goStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoStmt([NotNull] GolangParser.GoStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] GolangParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] GolangParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] GolangParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] GolangParser.TypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeLit([NotNull] GolangParser.TypeLitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeLit([NotNull] GolangParser.TypeLitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] GolangParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] GolangParser.ArrayTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.arrayLength"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLength([NotNull] GolangParser.ArrayLengthContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.arrayLength"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLength([NotNull] GolangParser.ArrayLengthContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.elementType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementType([NotNull] GolangParser.ElementTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.elementType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementType([NotNull] GolangParser.ElementTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.pointerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPointerType([NotNull] GolangParser.PointerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.pointerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPointerType([NotNull] GolangParser.PointerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.interfaceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterfaceType([NotNull] GolangParser.InterfaceTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.interfaceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterfaceType([NotNull] GolangParser.InterfaceTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.sliceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceType([NotNull] GolangParser.SliceTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.sliceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceType([NotNull] GolangParser.SliceTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.mapType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapType([NotNull] GolangParser.MapTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.mapType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapType([NotNull] GolangParser.MapTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.channelType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChannelType([NotNull] GolangParser.ChannelTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.channelType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChannelType([NotNull] GolangParser.ChannelTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.methodSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodSpec([NotNull] GolangParser.MethodSpecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.methodSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodSpec([NotNull] GolangParser.MethodSpecContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] GolangParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] GolangParser.FunctionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.signature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSignature([NotNull] GolangParser.SignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.signature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSignature([NotNull] GolangParser.SignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.result"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResult([NotNull] GolangParser.ResultContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.result"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResult([NotNull] GolangParser.ResultContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] GolangParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] GolangParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] GolangParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] GolangParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.parameterDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterDecl([NotNull] GolangParser.ParameterDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.parameterDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterDecl([NotNull] GolangParser.ParameterDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperand([NotNull] GolangParser.OperandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperand([NotNull] GolangParser.OperandContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] GolangParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] GolangParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.basicLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBasicLit([NotNull] GolangParser.BasicLitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.basicLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBasicLit([NotNull] GolangParser.BasicLitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.operandName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperandName([NotNull] GolangParser.OperandNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.operandName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperandName([NotNull] GolangParser.OperandNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.qualifiedIdent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedIdent([NotNull] GolangParser.QualifiedIdentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.qualifiedIdent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedIdent([NotNull] GolangParser.QualifiedIdentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.compositeLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompositeLit([NotNull] GolangParser.CompositeLitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.compositeLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompositeLit([NotNull] GolangParser.CompositeLitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.literalType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralType([NotNull] GolangParser.LiteralTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.literalType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralType([NotNull] GolangParser.LiteralTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.literalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralValue([NotNull] GolangParser.LiteralValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.literalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralValue([NotNull] GolangParser.LiteralValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementList([NotNull] GolangParser.ElementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementList([NotNull] GolangParser.ElementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.keyedElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyedElement([NotNull] GolangParser.KeyedElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.keyedElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyedElement([NotNull] GolangParser.KeyedElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKey([NotNull] GolangParser.KeyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKey([NotNull] GolangParser.KeyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElement([NotNull] GolangParser.ElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElement([NotNull] GolangParser.ElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.structType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructType([NotNull] GolangParser.StructTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.structType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructType([NotNull] GolangParser.StructTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.fieldDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldDecl([NotNull] GolangParser.FieldDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.fieldDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldDecl([NotNull] GolangParser.FieldDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.anonymousField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnonymousField([NotNull] GolangParser.AnonymousFieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.anonymousField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnonymousField([NotNull] GolangParser.AnonymousFieldContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.functionLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionLit([NotNull] GolangParser.FunctionLitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.functionLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionLit([NotNull] GolangParser.FunctionLitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryExpr([NotNull] GolangParser.PrimaryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryExpr([NotNull] GolangParser.PrimaryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelector([NotNull] GolangParser.SelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelector([NotNull] GolangParser.SelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndex([NotNull] GolangParser.IndexContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndex([NotNull] GolangParser.IndexContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.slice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSlice([NotNull] GolangParser.SliceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.slice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSlice([NotNull] GolangParser.SliceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.typeAssertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeAssertion([NotNull] GolangParser.TypeAssertionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.typeAssertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeAssertion([NotNull] GolangParser.TypeAssertionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] GolangParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] GolangParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.methodExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodExpr([NotNull] GolangParser.MethodExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.methodExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodExpr([NotNull] GolangParser.MethodExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.receiverType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReceiverType([NotNull] GolangParser.ReceiverTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.receiverType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReceiverType([NotNull] GolangParser.ReceiverTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] GolangParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] GolangParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpr([NotNull] GolangParser.UnaryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpr([NotNull] GolangParser.UnaryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.conversion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConversion([NotNull] GolangParser.ConversionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.conversion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConversion([NotNull] GolangParser.ConversionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GolangParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEos([NotNull] GolangParser.EosContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GolangParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEos([NotNull] GolangParser.EosContext context);
}
