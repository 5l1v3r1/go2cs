<# // This template creates a <PackageName>_<InterfaceName>Interface.cs file #>
<#@ template language="C#" inherits="TemplateBase" #>
<#@ output extension=".cs" #>
//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using goutil;

public static partial class <#=PackageName#>_package
{
    [<#=GeneratedCodeAttribute#>]
    <#=Scope#> class <#=InterfaceName#><T> : <#=InterfaceName#>
    {
        private T m_target;<#
        
        foreach (var decl in Functions)
        {
            #><#=new InterfaceFuncDeclTemplate
            {
                FunctionName = decl.functionName,
                Scope = decl.scope,
                ParameterSignature = decl.parameterSignature,
                NamedParameters = decl.namedParameters,
                ParameterTypes = decl.parameterTypes,
                ResultType = decl.resultType
            }
            .TransformText()#><#
        }
        
        foreach (var decl in Actions)
        {
            #><#=new InterfaceActionDeclTemplate
            {
                ActionName = decl.actionName,
                Scope = decl.scope,
                ParameterSignature = decl.parameterSignature,
                NamedParameters = decl.namedParameters,
                ParameterTypes = decl.parameterTypes
            }
            .TransformText()#><#
        }#>

        [DebuggerStepperBoundary]
        static <#=InterfaceName#>()
        {
            Type targetType = typeof(T);<#
        
            foreach (var decl in Functions)
            {
                #><#=new InterfaceFuncInitTemplate
                {
                    FunctionName = decl.functionName,
                    InterfaceName = InterfaceName,
                    ParameterTypes = decl.parameterTypes,
                    ResultType = decl.resultType
                }
                .TransformText()#><#
            }
            
            foreach (var decl in Actions)
            {
                #><#=new InterfaceActionInitTemplate
                {
                    ActionName = decl.actionName,
                    InterfaceName = InterfaceName,
                    ParameterTypes = decl.parameterTypes
                }
                .TransformText()#><#
            }#>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static explicit operator <#=InterfaceName#><T>(T target) => return new <#=InterfaceName#><T> { m_target = target };
    }

    [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
    <#=Scope#> static <#=InterfaceName#> <#=InterfaceName#>_cast<T>(T target) => (<#=InterfaceName#><T>)target;
}
<#+
// Template Parameters
public string PackageName;
public string InterfaceName;
public string Scope;
public (string functionName, string scope, string parameterSignature, string namedParameters, string parameterTypes, string resultType)[] Functions;
public (string actionName, string scope, string parameterSignature, string namedParameters, string parameterTypes)[] Actions;
#>