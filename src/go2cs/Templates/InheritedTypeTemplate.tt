<# // This template creates an inherited type, e.g., type MyFloat float64 #>
<# // This template creates a <PackageName>_<StructName>StructOf(<GoTypeName>).cs file #>
<#@ template language="C#" #>
<#@ output extension=".cs" #>
//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------
using System.Runtime.CompilerServices;

<#=NamespaceHeader#>
    public static unsafe partial class <#=PackageName#>_package
    {
        <#=Scope#> partial struct <#=StructName#>
        {
            // Value of the <#=StructName#> struct
            private readonly <#=TypeName#> m_value;

            public <#=StructName#>(<#=TypeName#> value) => m_value = value;

            // Enable implicit conversions between <#=TypeName#> and <#=StructName#> struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator <#=StructName#>(<#=TypeName#> value) => new <#=StructName#>(value);
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator <#=TypeName#>(<#=StructName#> value) => value.m_value;
        }
    }
<#=NamespaceFooter#>
<#+
// Template Parameters
public string NamespaceHeader;
public string NamespaceFooter;
public string PackageName;
public string StructName;
public string Scope;
public string TypeName;
#>