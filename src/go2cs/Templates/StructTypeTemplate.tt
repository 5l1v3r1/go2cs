<# // This template creates a <PackageName>_<StructName>Struct.cs file #>
<#@ template language="C#" inherits="TemplateBase" #>
<#@ output extension=".cs" #>
//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
<#if (!NamespacePrefix.Equals("go")) {#>
using go;
<#}#>

<#=NamespaceHeader#>
    public static unsafe partial class <#=PackageName#>_package
    {
        [<#=GeneratedCodeAttribute#>]
        <#=Scope#> partial struct <#=StructName#><#=InheritedInterfaces#>
        {
            public <#=StructName#>(NilType _)
            {
                // Field instance values
                //public DateTime When;
                //public string What = ""; <- string initialized to empty
                // Inherited interface initializations (set to null / default)
                // Inherited structure initializations
            }

            // Only include constructor if struct contains fields
            //public <#=StructName#>(params)
            //{
            //    this.Field = Field,
            //    // Inherited interface initializations
            //    // Inherited structure initializations
            //}

            // Enable comparisons between nil and <#=StructName#> struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(<#=StructName#> value, NilType nil) => value.Equals(default(<#=StructName#>));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(<#=StructName#> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, <#=StructName#> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, <#=StructName#> value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator <#=StructName#>(NilType nil) => default(<#=StructName#>);
        }
    }
<#=NamespaceFooter#><#+
// Template Parameters
public string NamespacePrefix;
public string NamespaceHeader;
public string NamespaceFooter;
public string PackageName;
public string StructName;
public string Scope;
public string InheritedInterfaces;
#>