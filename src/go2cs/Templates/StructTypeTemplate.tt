<# // This template creates a <PackageName>_<StructName>Struct.cs file #>
<#@ template language="C#" inherits="TemplateBase" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="go2cs.Metadata" #>
<#@ output extension=".cs" #>
//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on <#=GeneratedTime#>
// </auto-generated>
//---------------------------------------------------------
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
<#if (!NamespacePrefix.Equals("go")) {#>
using go;
<#}#>

<#=NamespaceHeader#>
    public static partial class <#=PackageName#>_package
    {
        [<#=GeneratedCodeAttribute#>]<#
        foreach (string promotedStruct in PromotedStructs)
        {
            if (!string.IsNullOrEmpty(promotedStruct))
            {
        #>

        [PromotedStruct(typeof(<#=promotedStruct#>))]<#
            }
        }#>
        <#=Scope#> partial struct <#=StructName#>
        {<#
            foreach (KeyValuePair<string, List<FunctionSignature>> kvp in PromotedFunctions)
            {
                foreach (var decl in kvp.Value)
                {
                    #><#=new StructFuncDeclTemplate
                    {
                        PromotedField = kvp.Key,
                        FunctionName = decl.Name,
                        Scope = "public",
                        ParameterSignature = decl.Signature.GenerateParametersSignature(false),
                        ParameterNames = GetParameterNames(decl),
                        ParameterTypes = GetParameterTypes(decl),
                        ResultType = decl.Signature.GenerateResultSignature()
                    }
                    .TransformText()#><#
                }
            }
            
            if (PromotedFunctions.Count > 0)
            {
            #>
            

            [DebuggerStepperBoundary]
            static <#=StructName#>()
            {
                Type targetType = typeof(<#=StructName#>);
                MethodInfo extensionMethod;
                
                // Any existing defined extensions will override interface instance reference calls<#
                
                foreach (KeyValuePair<string, List<FunctionSignature>> kvp in PromotedFunctions)
                {
                    foreach (var decl in kvp.Value)
                    {
                        #><#=new StructFuncInitTemplate
                        {
                            FunctionName = decl.Name
                        }
                        .TransformText()#><#
                    }
                }#>

            }<#
            
            }#>

            public <#=StructName#>(NilType _)
            {
                // Field instance values
                //public DateTime When;
                //public string What = ""; <- string initialized to empty
                // Inherited interface initializations (set to null / default)
                // Inherited structure initializations
            }

            // Only include constructor if struct contains fields
            //public <#=StructName#>(params)
            //{
            //    this.Field = Field,
            //    // Inherited interface initializations
            //    // Inherited structure initializations
            //}

            // Enable comparisons between nil and <#=StructName#> struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(<#=StructName#> value, NilType nil) => value.Equals(default(<#=StructName#>));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(<#=StructName#> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, <#=StructName#> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, <#=StructName#> value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator <#=StructName#>(NilType nil) => default(<#=StructName#>);
        }
    }
<#=NamespaceFooter#><#+
// Template Parameters
public string NamespacePrefix;
public string NamespaceHeader;
public string NamespaceFooter;
public string PackageName;
public string StructName;
public string Scope;
public IEnumerable<string> PromotedStructs;
public Dictionary<string, List<FunctionSignature>> PromotedFunctions;

private string GetParameterNames(FunctionSignature function)
{
    string parameterNames = function.GetParameterNames();

    if (parameterNames.Length > 0)
        parameterNames = ", " + parameterNames;

    return parameterNames;
}

private string GetParameterTypes(FunctionSignature function)
{
    string parameterTypes = function.GetParameterTypes();

    if (parameterTypes.Length > 0)
        parameterTypes = ", " + parameterTypes;

    return parameterTypes;
}
#>